#compdef wash

autoload -U is-at-least

_wash() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_wash_commands" \
"*::: :->wash" \
&& ret=0
    case $state in
    (wash)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-command-$line[1]:"
        case $line[1] in
            (app)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__app_commands" \
"*::: :->app" \
&& ret=0

    case $state in
    (app)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-app-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--watch[Switches to a real-time, live-updating application list]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the application to retrieve:' \
'::version -- The version of the application to retrieve. If left empty, retrieves the latest version:' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the application:' \
&& ret=0
;;
(history)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the application:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Name of the application to delete, or a path to a Wadm Application Manifest:' \
'::version -- Version of the application to delete. If not supplied, all versions are deleted:' \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::source -- The source of the application manifest, either a file path, remote file http url, or stdin. If no source is provided (or arg marches '\''-'\''), stdin is used:' \
&& ret=0
;;
(deploy)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--replace[Whether or not wash should attempt to replace the resources by performing an optimistic delete shortly before applying resources]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::application -- Name of the application to deploy, if it was already `put`, or a path to a file containing the application manifest:' \
'::version -- Version of the application to deploy, defaults to the latest created version:' \
&& ret=0
;;
(undeploy)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Name of the application to undeploy:' \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':application -- Path to the application manifest to validate:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__app__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-app-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(history)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(deploy)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(undeploy)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(build)
_arguments "${_arguments_options[@]}" : \
'-p+[Path to the wasmcloud.toml file or parent folder to use for building]:CONFIG_PATH:_files' \
'--config-path=[Path to the wasmcloud.toml file or parent folder to use for building]:CONFIG_PATH:_files' \
'--keys-directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:KEYS_DIRECTORY:_files' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the seed will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the seed will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (module or service). If this flag is not provided, the seed will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (module or service). If this flag is not provided, the seed will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'(--sign-only)--build-only[Skip signing the artifact and only use the native toolchain to build]' \
'(--build-only)--sign-only[Skip building the artifact and only use configuration to sign]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(call)
_arguments "${_arguments_options[@]}" : \
'-r+[RPC Host for connection, defaults to 127.0.0.1 for local nats]:RPC_HOST: ' \
'--rpc-host=[RPC Host for connection, defaults to 127.0.0.1 for local nats]:RPC_HOST: ' \
'-p+[RPC Port for connections, defaults to 4222 for local nats]:RPC_PORT: ' \
'--rpc-port=[RPC Port for connections, defaults to 4222 for local nats]:RPC_PORT: ' \
'--rpc-jwt=[JWT file for RPC authentication. Must be supplied with rpc_seed]:RPC_JWT: ' \
'--rpc-seed=[Seed file or literal for RPC authentication. Must be supplied with rpc_jwt]:RPC_SEED: ' \
'--rpc-credsfile=[Credsfile for RPC authentication. Combines rpc_seed and rpc_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:RPC_CREDSFILE:_files' \
'--rpc-ca-file=[CA file for RPC authentication. See https\://docs.nats.io/using-nats/developer/security/securing_nats for details]:RPC_CA_FILE:_files' \
'-x+[Lattice for wasmcloud command interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice for wasmcloud command interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length for RPC, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--rpc-timeout-ms=[Timeout length for RPC, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of the context to use for RPC connection, authentication, and cluster seed invocation signing]:CONTEXT: ' \
'--http-scheme=[Scheme to use when making the HTTP request]:HTTP_SCHEME: ' \
'--http-host=[Host to use when making the HTTP request]:HTTP_HOST: ' \
'--http-port=[Port on which to make the HTTP request]:HTTP_PORT: ' \
'--http-method=[Method to use when making the HTTP request]:HTTP_METHOD: ' \
'(--http-body-path)--http-body=[Stringified body contents to use when making the HTTP request]:HTTP_BODY: ' \
'(--http-body)--http-body-path=[Path to a file to use as the body when making a HTTP request]:HTTP_BODY_PATH:_files' \
'--http-content-type=[Content type header to pass with the request]:HTTP_CONTENT_TYPE: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--http-response-extract-json[Whether the content of the HTTP response body should be parsed as JSON and returned directly]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component-id -- The unique component identifier of the component to invoke:' \
':function -- Fully qualified WIT export to invoke on the component, e.g. `wasi\:cli/run.run`:' \
&& ret=0
;;
(capture)
_arguments "${_arguments_options[@]}" : \
'--window-size=[The length of time in minutes to keep messages in the stream]:window_size: ' \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'(--disable)--enable[Enable wash capture. This will setup a NATS JetStream stream to capture all invocations]' \
'(--enable)--disable[Disable wash capture. This will removed the NATS JetStream stream that was setup to capture all invocations]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__capture_commands" \
"*::: :->capture" \
&& ret=0

    case $state in
    (capture)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-capture-command-$line[1]:"
        case $line[1] in
            (replay)
_arguments "${_arguments_options[@]}" : \
'--source-id=[A component ID to filter captured invocations by. This will filter anywhere the component is the source of the invocation]:source_id: ' \
'--target-id=[A component ID to filter captured invocations by. This will filter anywhere the component is the target of the invocation]:target_id: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--interactive[Whether or not to step through the replay one message at a time]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':capturefile -- The file path to the capture file to read from:_files' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__capture__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-capture-help-command-$line[1]:"
        case $line[1] in
            (replay)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(completions)
_arguments "${_arguments_options[@]}" : \
'-d+[Output directory (default '\''.'\'')]:DIR:_files' \
'--dir=[Output directory (default '\''.'\'')]:DIR:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__completions_commands" \
"*::: :->completions" \
&& ret=0

    case $state in
    (completions)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-completions-command-$line[1]:"
        case $line[1] in
            (zsh)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(bash)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(power-shell)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__completions__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-completions-help-command-$line[1]:"
        case $line[1] in
            (zsh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(bash)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(power-shell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(claims)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__claims_commands" \
"*::: :->claims" \
&& ret=0

    case $state in
    (claims)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-claims-command-$line[1]:"
        case $line[1] in
            (inspect)
_arguments "${_arguments_options[@]}" : \
'-d+[Digest to verify artifact against (if OCI URL is provided for \`<component>\`)]:DIGEST: ' \
'--digest=[Digest to verify artifact against (if OCI URL is provided for \`<component>\`)]:DIGEST: ' \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--jwt-only[Extract the raw JWT from the file and print to stdout]' \
'--wit[Extract the WIT world from a component and print to stdout instead of the claims]' \
'--allow-latest[Allow latest artifact tags (if OCI URL is provided for \`<component>\`)]' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking OCI registry'\''s certificate for validity]' \
'--no-cache[skip the local OCI cache]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component -- Path to signed component or OCI URL of signed component:' \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" : \
'-d+[Destination for signed module. If this flag is not provided, the signed module will be placed in the same directory as the source with a "_s" suffix]:DESTINATION: ' \
'--destination=[Destination for signed module. If this flag is not provided, the signed module will be placed in the same directory as the source with a "_s" suffix]:DESTINATION: ' \
'-n+[A human-readable, descriptive name for the token]:NAME: ' \
'--name=[A human-readable, descriptive name for the token]:NAME: ' \
'*-t+[A list of arbitrary tags to be embedded in the token]:TAGS: ' \
'*--tag=[A list of arbitrary tags to be embedded in the token]:TAGS: ' \
'-r+[Revision number]:REV: ' \
'--rev=[Revision number]:REV: ' \
'-v+[Human-readable version string]:VER: ' \
'--ver=[Human-readable version string]:VER: ' \
'-a+[Developer or human friendly unique alias used for invoking an component, consisting of lowercase alphanumeric characters, underscores '\''_'\'' and slashes '\''/'\'']:CALL_ALIAS: ' \
'--call-alias=[Developer or human friendly unique alias used for invoking an component, consisting of lowercase alphanumeric characters, underscores '\''_'\'' and slashes '\''/'\'']:CALL_ALIAS: ' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (module). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (module). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-x+[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'--expires=[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'-b+[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'--nbf=[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':source -- File to read:' \
&& ret=0
;;
(token)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__claims__token_commands" \
"*::: :->token" \
&& ret=0

    case $state in
    (token)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-claims-token-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'-n+[A human-readable, descriptive name for the token]:NAME: ' \
'--name=[A human-readable, descriptive name for the token]:NAME: ' \
'*-t+[A list of arbitrary tags to be embedded in the token]:TAGS: ' \
'*--tag=[A list of arbitrary tags to be embedded in the token]:TAGS: ' \
'-r+[Revision number]:REV: ' \
'--rev=[Revision number]:REV: ' \
'-v+[Human-readable version string]:VER: ' \
'--ver=[Human-readable version string]:VER: ' \
'-a+[Developer or human friendly unique alias used for invoking an component, consisting of lowercase alphanumeric characters, underscores '\''_'\'' and slashes '\''/'\'']:CALL_ALIAS: ' \
'--call-alias=[Developer or human friendly unique alias used for invoking an component, consisting of lowercase alphanumeric characters, underscores '\''_'\'' and slashes '\''/'\'']:CALL_ALIAS: ' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (module). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (module). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-x+[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'--expires=[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'-b+[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'--nbf=[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(operator)
_arguments "${_arguments_options[@]}" : \
'-n+[A descriptive name for the operator]:NAME: ' \
'--name=[A descriptive name for the operator]:NAME: ' \
'-i+[Path to issuer seed key (self signing operator). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (self signing operator). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'*-a+[Additional keys to add to valid signers list Can either be seed value or path to seed file]:additional-keys: ' \
'*--additional-key=[Additional keys to add to valid signers list Can either be seed value or path to seed file]:additional-keys: ' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-x+[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'--expires=[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'-b+[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'--nbf=[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(account)
_arguments "${_arguments_options[@]}" : \
'-n+[A descriptive name for the account]:NAME: ' \
'--name=[A descriptive name for the account]:NAME: ' \
'-i+[Path to issuer seed key (operator). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (operator). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'*-a+[Additional keys to add to valid signers list. Can either be seed value or path to seed file]:additional-keys: ' \
'*--additional-key=[Additional keys to add to valid signers list. Can either be seed value or path to seed file]:additional-keys: ' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-x+[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'--expires=[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'-b+[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'--nbf=[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
'-n+[A descriptive name for the provider]:NAME: ' \
'--name=[A descriptive name for the provider]:NAME: ' \
'-v+[A human-readable string identifying the vendor of this provider (e.g. Redis or Cassandra or NATS etc)]:VENDOR: ' \
'--vendor=[A human-readable string identifying the vendor of this provider (e.g. Redis or Cassandra or NATS etc)]:VENDOR: ' \
'-r+[Monotonically increasing revision number]:REVISION: ' \
'--revision=[Monotonically increasing revision number]:REVISION: ' \
'-e+[Human-friendly version string]:VERSION: ' \
'--version=[Human-friendly version string]:VERSION: ' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-x+[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'--expires=[Indicates the token expires in the given amount of days. If this option is left off, the token will never expire]:EXPIRES_IN_DAYS: ' \
'-b+[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'--nbf=[Period in days that must elapse before this token is valid. If this option is left off, the token will be valid immediately]:NOT_BEFORE_DAYS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of keys if seed(s) are not provided]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__claims__token__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-claims-token-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(operator)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(account)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__claims__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-claims-help-command-$line[1]:"
        case $line[1] in
            (inspect)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(token)
_arguments "${_arguments_options[@]}" : \
":: :_wash__claims__help__token_commands" \
"*::: :->token" \
&& ret=0

    case $state in
    (token)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-claims-help-token-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(operator)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(account)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-config-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the configuration to put:' \
'*::config_value -- The configuration values to put, in the form of `key=value`. Can be specified multiple times, but must be specified at least once:' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the configuration to get:' \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the configuration to delete:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__config__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-config-help-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(ctx)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__ctx_commands" \
"*::: :->ctx" \
&& ret=0

    case $state in
    (ctx)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-ctx-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'--directory=[Location of context files for managing. Defaults to \$WASH_CONTEXTS (\$HOME/.wash/contexts)]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
'--directory=[Location of context files for managing. Defaults to \$WASH_CONTEXTS (\$HOME/.wash/contexts)]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Name of the context to delete. If not supplied, the user will be prompted to select an existing context:' \
&& ret=0
;;
(new)
_arguments "${_arguments_options[@]}" : \
'--directory=[Location of context files for managing. Defaults to \$WASH_CONTEXTS (\$HOME/.wash/contexts)]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'-i[Create the context in an interactive terminal prompt, instead of an autogenerated default context]' \
'--interactive[Create the context in an interactive terminal prompt, instead of an autogenerated default context]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Name of the context, will be sanitized to ensure it'\''s a valid filename:' \
&& ret=0
;;
(default)
_arguments "${_arguments_options[@]}" : \
'--directory=[Location of context files for managing. Defaults to \$WASH_CONTEXTS (\$HOME/.wash/contexts)]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Name of the context to use for default. If not supplied, the user will be prompted to select a default:' \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
'--directory=[Location of context files for managing. Defaults to \$WASH_CONTEXTS (\$HOME/.wash/contexts)]:DIRECTORY:_files' \
'-e+[Your terminal text editor of choice. This editor must be present in your \$PATH, or an absolute filepath]:EDITOR: ' \
'--editor=[Your terminal text editor of choice. This editor must be present in your \$PATH, or an absolute filepath]:EDITOR: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Name of the context to edit, if not supplied the user will be prompted to select a context:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__ctx__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-ctx-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(new)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(default)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(dev)
_arguments "${_arguments_options[@]}" : \
'--nats-credsfile=[Optional path to a NATS credentials file to authenticate and extend existing NATS infrastructure]:NATS_CREDSFILE:_files' \
'--nats-config-file=[Optional path to a NATS config file NOTE\: If your configuration changes the address or port to listen on from 0.0.0.0\:4222, ensure you set --nats-host and --nats-port]:NATS_CONFIGFILE:_files' \
'--nats-remote-url=[Optional remote URL of existing NATS infrastructure to extend]:NATS_REMOTE_URL: ' \
'--nats-version=[NATS server version to download, e.g. \`v2.10.7\`. See https\://github.com/nats-io/nats-server/releases/ for releases]:NATS_VERSION: ' \
'--nats-host=[NATS server host to connect to]:NATS_HOST: ' \
'--nats-port=[NATS server port to connect to. This will be used as the NATS listen port if \`--nats-connect-only\` isn'\''t set]:NATS_PORT: ' \
'--nats-websocket-port=[NATS websocket port to use. TLS is not supported. This is required for the wash ui to connect from localhost]:NATS_WEBSOCKET_PORT: ' \
'--nats-js-domain=[NATS Server Jetstream domain for extending superclusters]:NATS_JS_DOMAIN: ' \
'--wasmcloud-version=[wasmCloud host version to download, e.g. \`v0.55.0\`. See https\://github.com/wasmCloud/wasmcloud/releases for releases]:WASMCLOUD_VERSION: ' \
'-x+[A unique identifier for a lattice, frequently used within NATS topics to isolate messages among different lattices]:LATTICE: ' \
'--lattice=[A unique identifier for a lattice, frequently used within NATS topics to isolate messages among different lattices]:LATTICE: ' \
'--host-seed=[The seed key (a printable 256-bit Ed25519 private key) used by this host to generate it'\''s public key]:HOST_SEED: ' \
'--rpc-host=[An IP address or DNS name to use to connect to NATS for RPC messages, defaults to the value supplied to --nats-host if not supplied]:RPC_HOST: ' \
'--rpc-port=[A port to use to connect to NATS for RPC messages, defaults to the value supplied to --nats-port if not supplied]:RPC_PORT: ' \
'--rpc-seed=[A seed nkey to use to authenticate to NATS for RPC messages]:RPC_SEED: ' \
'--rpc-timeout-ms=[Timeout in milliseconds for all RPC calls]:RPC_TIMEOUT_MS: ' \
'--rpc-jwt=[A user JWT to use to authenticate to NATS for RPC messages]:RPC_JWT: ' \
'--rpc-tls-ca-file=[A TLS CA file to use to authenticate to NATS for RPC messages]:RPC_TLS_CA_FILE:_files' \
'--rpc-credsfile=[Convenience flag for RPC authentication, internally this parses the JWT and seed from the credsfile]:RPC_CREDSFILE:_files' \
'--ctl-host=[An IP address or DNS name to use to connect to NATS for Control Interface (CTL) messages, defaults to the value supplied to --nats-host if not supplied]:CTL_HOST: ' \
'--ctl-port=[A port to use to connect to NATS for CTL messages, defaults to the value supplied to --nats-port if not supplied]:CTL_PORT: ' \
'--ctl-seed=[A seed nkey to use to authenticate to NATS for CTL messages]:CTL_SEED: ' \
'--ctl-jwt=[A user JWT to use to authenticate to NATS for CTL messages]:CTL_JWT: ' \
'--ctl-credsfile=[Convenience flag for CTL authentication, internally this parses the JWT and seed from the credsfile]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[A TLS CA file to use to authenticate to NATS for CTL messages]:CTL_TLS_CA_FILE:_files' \
'--cluster-seed=[The seed key (a printable 256-bit Ed25519 private key) used by this host to sign all invocations]:CLUSTER_SEED: ' \
'*--cluster-issuers=[A comma-delimited list of public keys that can be used as issuers on signed invocations]:CLUSTER_ISSUERS: ' \
'--provider-delay=[Delay, in milliseconds, between requesting a provider shut down and forcibly terminating its process]:PROVIDER_DELAY: ' \
'*--allowed-insecure=[A comma-separated list of OCI hosts to which insecure (non-TLS) connections are allowed]:ALLOWED_INSECURE: ' \
'--wasmcloud-js-domain=[Jetstream domain name, configures a host to properly connect to a NATS supercluster]:WASMCLOUD_JS_DOMAIN: ' \
'--allow-file-load=[Denotes if a wasmCloud host should allow starting components from the file system]:ALLOW_FILE_LOAD:(true false)' \
'*-l+[A label to apply to the host, in the form of \`key=value\`. This flag can be repeated to supply multiple labels]:LABEL: ' \
'*--label=[A label to apply to the host, in the form of \`key=value\`. This flag can be repeated to supply multiple labels]:LABEL: ' \
'--log-level=[Controls the verbosity of JSON structured logs from the wasmCloud host]:STRUCTURED_LOG_LEVEL: ' \
'--max-execution-time-ms=[Defines the Max Execution time (in ms) that the host runtime will execute for]:MAX_EXECUTION_TIME: ' \
'--secrets-topic=[If provided, enables interfacing with a secrets backend for secret retrieval over the given topic prefix]:SECRETS_TOPIC: ' \
'--policy-topic=[If provided, enables policy checks on start actions and component invocations]:POLICY_TOPIC: ' \
'--wadm-version=[wadm version to download, e.g. \`v0.4.0\`. See https\://github.com/wasmCloud/wadm/releases for releases]:WADM_VERSION: ' \
'--wadm-js-domain=[The JetStream domain to use for wadm]:WADM_JS_DOMAIN: ' \
'--wadm-manifest=[The path to a wadm application manifest to run while the host is up]:WADM_MANIFEST:_files' \
'--host-id=[ID of the host to use for \`wash dev\` if one is not selected, \`wash dev\` will attempt to use the single host in the lattice]:host-id: ' \
'--work-dir=[Path to code directory]:code-dir:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'(--nats-remote-url)--nats-connect-only[If a connection can'\''t be established, exit and don'\''t start a NATS server. Will be ignored if a remote_url and credsfile are specified]' \
'--rpc-tls[Optional flag to enable host communication with a NATS server over TLS for RPC messages]' \
'--ctl-tls[Optional flag to enable host communication with a NATS server over TLS for CTL messages]' \
'--allow-latest[Determines whether OCI images tagged latest are allowed to be pulled from OCI registries and started]' \
'--config-service-enabled[Denotes if a wasmCloud host should issue requests to a config service on startup]' \
'--enable-structured-logging[Enable JSON structured logging from the wasmCloud host]' \
'--enable-ipv6[Enables IPV6 addressing for wasmCloud hosts]' \
'--wasmcloud-start-only[If enabled, wasmCloud will not be downloaded if it'\''s not installed]' \
'--multi-local[If enabled, allows starting additional wasmCloud hosts on this machine]' \
'--disable-wadm[If enabled, wadm will not be downloaded or run as a part of the up command]' \
'--leave-host-running[Leave the wasmCloud host running after stopping the devloop]' \
'--use-host-subprocess[Run the wasmCloud host in a subprocess (rather than detached mode)]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(down)
_arguments "${_arguments_options[@]}" : \
'-x+[A lattice prefix is a unique identifier for a lattice, and is frequently used within NATS topics to isolate messages from different lattices]:LATTICE: ' \
'--lattice=[A lattice prefix is a unique identifier for a lattice, and is frequently used within NATS topics to isolate messages from different lattices]:LATTICE: ' \
'--ctl-host=[An IP address or DNS name to use to connect to NATS for Control Interface (CTL) messages, defaults to the value supplied to --nats-host if not supplied]:CTL_HOST: ' \
'--ctl-port=[A port to use to connect to NATS for CTL messages, defaults to the value supplied to --nats-port if not supplied]:CTL_PORT: ' \
'--ctl-credsfile=[Convenience flag for CTL authentication, internally this parses the JWT and seed from the credsfile]:CTL_CREDSFILE:_files' \
'--ctl-seed=[A seed nkey to use to authenticate to NATS for CTL messages]:CTL_SEED: ' \
'--ctl-jwt=[A user JWT to use to authenticate to NATS for CTL messages]:CTL_JWT: ' \
'--ctl-tls-ca-file=[A TLS CA file to use to authenticate to NATS for CTL messages]:CTL_TLS_CA_FILE:_files' \
'--host-id=[]:HOST_ID: ' \
'--purge-jetstream=[Purge NATS Jetstream storage and streams that persist when wasmCloud is stopped]:PURGE:((none\:"Don'\''t purge any Jetstream data, the default"
all\:"Purge all streams and KV buckets for wasmCloud and wadm"
wadm\:"Purge all streams and KV buckets for wadm, removing all application manifests"
wasmcloud\:"Purge all KV buckets for wasmCloud, removing all links and configuration data"))' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--all[Shutdown all hosts running locally if launched with --multi-local]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(drain)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__drain_commands" \
"*::: :->drain" \
&& ret=0

    case $state in
    (drain)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-drain-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(oci)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(lib)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(downloads)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__drain__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-drain-help-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(oci)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(lib)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(downloads)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-get-command-$line[1]:"
        case $line[1] in
            (links)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(claims)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(hosts)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(inventory)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--watch=[Switches to a real-time, live-updating host inventory]' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::host-id -- Host ID to retrieve inventory for. If not provided, wash will query the inventories of all running hosts:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__get__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-get-help-command-$line[1]:"
        case $line[1] in
            (links)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(claims)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hosts)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(inventory)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(inspect)
_arguments "${_arguments_options[@]}" : \
'-d+[Digest to verify artifact against (if OCI URL is provided for \`<target>\`)]:DIGEST: ' \
'--digest=[Digest to verify artifact against (if OCI URL is provided for \`<target>\`)]:DIGEST: ' \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'(--wit)--jwt-only[Extract the raw JWT from the file and print to stdout]' \
'(--jwt-only)--wit[Extract the WIT world from a component and print to stdout instead of the claims. When inspecting a provider archive, this flag will be ignored]' \
'--allow-latest[Allow latest artifact tags (if OCI URL is provided for \`<target>\`)]' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking OCI registry'\''s certificate for validity]' \
'--no-cache[skip the local OCI cache and pull the artifact from the registry to inspect]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':target -- Path or OCI URL to signed component or provider archive:' \
&& ret=0
;;
(keys)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__keys_commands" \
"*::: :->keys" \
&& ret=0

    case $state in
    (keys)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-keys-command-$line[1]:"
        case $line[1] in
            (gen)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':keytype -- The type of keypair to generate. May be Account, User, Module (or Component), Service (or Provider), Server (or Host), Operator, Cluster, Curve (xkey):' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-d+[Absolute path to where keypairs are stored. Defaults to \`\$HOME/.wash/keys\`]:DIRECTORY:_files' \
'--directory=[Absolute path to where keypairs are stored. Defaults to \`\$HOME/.wash/keys\`]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':keyname -- The name of the key to output:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-d+[Absolute path to where keypairs are stored. Defaults to \`\$HOME/.wash/keys\`]:DIRECTORY:_files' \
'--directory=[Absolute path to where keypairs are stored. Defaults to \`\$HOME/.wash/keys\`]:DIRECTORY:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__keys__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-keys-help-command-$line[1]:"
        case $line[1] in
            (gen)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(link)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__link_commands" \
"*::: :->link" \
&& ret=0

    case $state in
    (link)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-link-command-$line[1]:"
        case $line[1] in
            (query)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'*--interface=[The interface of the link, e.g. "incoming-handler" in "wasi\:http/incoming-handler"]:INTERFACES: ' \
'*--source-config=[List of named configuration to make available to the source]:SOURCE_CONFIG: ' \
'*--target-config=[List of named configuration to make available to the target]:TARGET_CONFIG: ' \
'-l+[Link name, defaults to "default". Used for scenarios where a single source may have multiple links to the same target, or different targets with the same WIT namespace, package, and interface]:LINK_NAME: ' \
'--link-name=[Link name, defaults to "default". Used for scenarios where a single source may have multiple links to the same target, or different targets with the same WIT namespace, package, and interface]:LINK_NAME: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':source-id -- The ID of the component to link from:' \
':target -- The ID of the component to link to:' \
':wit-namespace -- The WIT namespace of the link, e.g. "wasi" in "wasi\:http/incoming-handler":' \
':wit-package -- The WIT package of the link, e.g. "http" in "wasi\:http/incoming-handler":' \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-l+[Link name, defaults to "default"]:LINK_NAME: ' \
'--link-name=[Link name, defaults to "default"]:LINK_NAME: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':source-id -- Component ID or name of the source of the link:' \
':wit-namespace -- WIT namespace of the link:' \
':wit-package -- WIT package of the link:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__link__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-link-help-command-$line[1]:"
        case $line[1] in
            (query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(new)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__new_commands" \
"*::: :->new" \
&& ret=0

    case $state in
    (new)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-new-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'--git=[Github repository url. Requires '\''git'\'' to be installed in PATH]:GIT: ' \
'--subfolder=[Optional subfolder of the git repository]:SUBFOLDER: ' \
'--branch=[Optional github branch. Defaults to "main"]:BRANCH: ' \
'-p+[Optional path for template project (alternative to --git)]:PATH:_files' \
'--path=[Optional path for template project (alternative to --git)]:PATH:_files' \
'-v+[Optional path to file containing placeholder values]:VALUES:_files' \
'--values=[Optional path to file containing placeholder values]:VALUES:_files' \
'--favorites=[Favorites file - to use for project selection]:FAVORITES:_files' \
'-t+[Template name - name of template to use]:TEMPLATE_NAME: ' \
'--template-name=[Template name - name of template to use]:TEMPLATE_NAME: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--silent[Silent - do not prompt user. Placeholder values in the templates will be resolved from a '\''--values'\'' file and placeholder defaults]' \
'--no-git-init[Don'\''t run '\''git init'\'' on the new folder]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::project_name -- Project name:' \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
'--git=[Github repository url. Requires '\''git'\'' to be installed in PATH]:GIT: ' \
'--subfolder=[Optional subfolder of the git repository]:SUBFOLDER: ' \
'--branch=[Optional github branch. Defaults to "main"]:BRANCH: ' \
'-p+[Optional path for template project (alternative to --git)]:PATH:_files' \
'--path=[Optional path for template project (alternative to --git)]:PATH:_files' \
'-v+[Optional path to file containing placeholder values]:VALUES:_files' \
'--values=[Optional path to file containing placeholder values]:VALUES:_files' \
'--favorites=[Favorites file - to use for project selection]:FAVORITES:_files' \
'-t+[Template name - name of template to use]:TEMPLATE_NAME: ' \
'--template-name=[Template name - name of template to use]:TEMPLATE_NAME: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--silent[Silent - do not prompt user. Placeholder values in the templates will be resolved from a '\''--values'\'' file and placeholder defaults]' \
'--no-git-init[Don'\''t run '\''git init'\'' on the new folder]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
'::project_name -- Project name:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__new__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-new-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(par)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__par_commands" \
"*::: :->par" \
&& ret=0

    case $state in
    (par)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-par-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-v+[Vendor string to help identify the publisher of the provider (e.g. Redis, Cassandra, wasmcloud, etc). Not unique]:VENDOR: ' \
'--vendor=[Vendor string to help identify the publisher of the provider (e.g. Redis, Cassandra, wasmcloud, etc). Not unique]:VENDOR: ' \
'-r+[Monotonically increasing revision number]:REVISION: ' \
'--revision=[Monotonically increasing revision number]:REVISION: ' \
'--version=[Human friendly version string]:VERSION: ' \
'-j+[Optional path to a JSON schema describing the link definition specification for this provider]:SCHEMA:_files' \
'--schema=[Optional path to a JSON schema describing the link definition specification for this provider]:SCHEMA:_files' \
'-d+[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'-n+[Name of the capability provider]:NAME: ' \
'--name=[Name of the capability provider]:NAME: ' \
'-a+[Architecture of provider binary in format ARCH-OS (e.g. x86_64-linux)]:ARCH: ' \
'--arch=[Architecture of provider binary in format ARCH-OS (e.g. x86_64-linux)]:ARCH: ' \
'-b+[Path to provider binary for populating the archive]:BINARY: ' \
'--binary=[Path to provider binary for populating the archive]:BINARY: ' \
'--destination=[File output destination path]:DESTINATION: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--compress[Include a compressed provider archive]' \
'--disable-keygen[Disables autogeneration of signing keys]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" : \
'-d+[Digest to verify artifact against (if OCI URL is provided for \`<archive>\`)]:DIGEST: ' \
'--digest=[Digest to verify artifact against (if OCI URL is provided for \`<archive>\`)]:DIGEST: ' \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--allow-latest[Allow latest artifact tags (if OCI URL is provided for \`<archive>\`)]' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking OCI registry'\''s certificate for validity]' \
'--no-cache[skip the local OCI cache]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':archive -- Path to provider archive or OCI URL of provider archive:' \
&& ret=0
;;
(insert)
_arguments "${_arguments_options[@]}" : \
'-a+[Architecture of binary in format ARCH-OS (e.g. x86_64-linux)]:ARCH: ' \
'--arch=[Architecture of binary in format ARCH-OS (e.g. x86_64-linux)]:ARCH: ' \
'-b+[Path to provider binary to insert into archive]:BINARY: ' \
'--binary=[Path to provider binary to insert into archive]:BINARY: ' \
'-d+[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'--directory=[Location of key files for signing. Defaults to \$WASH_KEYS (\$HOME/.wash/keys)]:DIRECTORY:_files' \
'-i+[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'--issuer=[Path to issuer seed key (account). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:ISSUER: ' \
'-s+[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'--subject=[Path to subject seed key (service). If this flag is not provided, the will be sourced from \$WASH_KEYS (\$HOME/.wash/keys) or generated for you if it cannot be found]:SUBJECT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--disable-keygen[Disables autogeneration of signing keys]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':archive -- Path to provider archive:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__par__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-par-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(insert)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(plugin)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__plugin_commands" \
"*::: :->plugin" \
&& ret=0

    case $state in
    (plugin)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-plugin-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-d+[Digest to verify plugin against. For OCI manifests, this is the digest format used in the manifest. For other types of plugins, this is the SHA256 digest of the plugin binary]:DIGEST: ' \
'--digest=[Digest to verify plugin against. For OCI manifests, this is the digest format used in the manifest. For other types of plugins, this is the SHA256 digest of the plugin binary]:DIGEST: ' \
'--plugin-dir=[Path to plugin directory. Defaults to \$HOME/.wash/plugins]:PLUGIN_DIR:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking server'\''s certificate for validity]' \
'--allow-latest[Allow latest artifact tags (if pulling from OCI registry)]' \
'--update[Whether or not to update the plugin if it is already installed. Defaults to false]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':url -- URL of the plugin to install. Can be a file\://, http\://, https\://, or oci\:// URL:' \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
'--plugin-dir=[Path to plugin directory. Defaults to \$HOME/.wash/plugins]:PLUGIN_DIR:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':id -- ID of the plugin to uninstall:' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--plugin-dir=[Path to plugin directory. Defaults to \$HOME/.wash/plugins]:PLUGIN_DIR:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__plugin__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-plugin-help-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(push)
_arguments "${_arguments_options[@]}" : \
'-r+[Registry of artifact. This is only needed if the URL is not a full (OCI) artifact URL (ie, missing the registry fragment)]:REGISTRY: ' \
'--registry=[Registry of artifact. This is only needed if the URL is not a full (OCI) artifact URL (ie, missing the registry fragment)]:REGISTRY: ' \
'-c+[Path to config file, if omitted will default to a blank configuration]:CONFIG:_files' \
'--config=[Path to config file, if omitted will default to a blank configuration]:CONFIG:_files' \
'*-a+[Optional set of annotations to apply to the OCI artifact manifest]:annotations: ' \
'*--annotation=[Optional set of annotations to apply to the OCI artifact manifest]:annotations: ' \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--allow-latest[Allow latest artifact tags]' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking server'\''s certificate for validity]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':url -- URL to push artifact to:' \
':artifact -- Path to artifact to push:' \
&& ret=0
;;
(pull)
_arguments "${_arguments_options[@]}" : \
'--destination=[File destination of artifact]:DESTINATION: ' \
'-r+[Registry of artifact. This is only needed if the URL is not a full (OCI) artifact URL (ie, missing the registry fragment)]:REGISTRY: ' \
'--registry=[Registry of artifact. This is only needed if the URL is not a full (OCI) artifact URL (ie, missing the registry fragment)]:REGISTRY: ' \
'-d+[Digest to verify artifact against]:DIGEST: ' \
'--digest=[Digest to verify artifact against]:DIGEST: ' \
'-u+[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'--user=[OCI username, if omitted anonymous authentication will be used]:USER: ' \
'-p+[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'--password=[OCI password, if omitted anonymous authentication will be used]:PASSWORD: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--allow-latest[Allow latest artifact tags]' \
'--insecure[Allow insecure (HTTP) registry connections]' \
'--insecure-skip-tls-verify[Skip checking server'\''s certificate for validity]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':url -- URL of artifact:' \
&& ret=0
;;
(secrets)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__secrets_commands" \
"*::: :->secrets" \
&& ret=0

    case $state in
    (secrets)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-secrets-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--field=[The field to use for retrieving the secret from the backend]:FIELD: ' \
'-v+[The version of the secret to retrieve. If not supplied, the latest version will be used]:VERSION: ' \
'--version=[The version of the secret to retrieve. If not supplied, the latest version will be used]:VERSION: ' \
'*--property=[Freeform policy properties to pass to the secrets backend, in the form of \`key=value\`. Can be specified multiple times]:POLICY_PROPERTIES: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- The name of the secret reference to create:' \
':backend -- The backend to fetch the secret from at runtime:' \
':key -- The key to use for retrieving the secret from the backend:' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name:' \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':name:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__secrets__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-secrets-help-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(spy)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component_id -- Component ID to spy on, component or capability provider. This is the unique identifier supplied to the component at startup:' \
&& ret=0
;;
(scale)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__scale_commands" \
"*::: :->scale" \
&& ret=0

    case $state in
    (scale)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-scale-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-c+[Maximum number of component instances allowed to run concurrently. Setting this value to \`0\` will stop the component]:MAX_INSTANCES: ' \
'--max-instances=[Maximum number of component instances allowed to run concurrently. Setting this value to \`0\` will stop the component]:MAX_INSTANCES: ' \
'*-a+[Optional set of annotations used to describe the nature of this component scale command. For example, autonomous agents may wish to “tag” scale requests as part of a given deployment]:ANNOTATIONS: ' \
'*--annotations=[Optional set of annotations used to describe the nature of this component scale command. For example, autonomous agents may wish to “tag” scale requests as part of a given deployment]:ANNOTATIONS: ' \
'*--config=[List of named configuration to apply to the component, may be empty]:CONFIG: ' \
'--wait-timeout-ms=[Timeout for waiting for scale to occur (normally on an auction response), defaults to 2000 milliseconds]:WAIT_TIMEOUT_MS: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--skip-wait[By default, the command will wait until the component has been scaled. If this flag is passed, the command will return immediately after acknowledgement from the host, without waiting for the component to be scaled. If this flag is omitted, the command will wait until the scaled event has been acknowledged]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':host-id -- ID of host to scale component on. If a non-ID is provided, the host will be selected based on matching the friendly name and will return an error if more than one host matches:' \
':component-ref -- Component reference, e.g. the absolute file path or OCI URL:' \
':component-id -- Unique ID to use for the component:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__scale__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-scale-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(start)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__start_commands" \
"*::: :->start" \
&& ret=0

    case $state in
    (start)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-start-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-id=[Id of host or a string to match on the friendly name of a host. if omitted the component will be auctioned in the lattice to find a suitable host. If a string is supplied to match against, then the matching host ID will be used. If more than one host matches, then an error will be returned]:HOST_ID: ' \
'--max-instances=[Maximum number of instances this component can run concurrently]:MAX_INSTANCES: ' \
'*-c+[Constraints for component auction in the form of "label=value". If host-id is supplied, this list is ignored]:constraints: ' \
'*--constraint=[Constraints for component auction in the form of "label=value". If host-id is supplied, this list is ignored]:constraints: ' \
'--auction-timeout-ms=[Timeout to await an auction response, defaults to 2000 milliseconds]:AUCTION_TIMEOUT_MS: ' \
'*--config=[List of named configuration to apply to the component, may be empty]:CONFIG: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--skip-wait[By default, the command will wait until the component has been started. If this flag is passed, the command will return immediately after acknowledgement from the host, without waiting for the component to start. If this flag is omitted, the timeout will be adjusted to 5 seconds to account for component download times]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component-ref -- Component reference, e.g. the absolute file path or OCI URL:' \
':component-id -- Unique ID to use for the component:' \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-id=[Id of host or a string to match on the friendly name of a host. if omitted the provider will be auctioned in the lattice to find a suitable host. If a string is supplied to match against, then the matching host ID will be used. If more than one host matches, then an error will be returned]:HOST_ID: ' \
'-l+[Link name of provider]:LINK_NAME: ' \
'--link-name=[Link name of provider]:LINK_NAME: ' \
'*-c+[Constraints for provider auction in the form of "label=value". If host-id is supplied, this list is ignored]:constraints: ' \
'*--constraint=[Constraints for provider auction in the form of "label=value". If host-id is supplied, this list is ignored]:constraints: ' \
'--auction-timeout-ms=[Timeout to await an auction response, defaults to 2000 milliseconds]:AUCTION_TIMEOUT_MS: ' \
'*--config=[List of named configuration to apply to the provider, may be empty]:CONFIG: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--skip-wait[By default, the command will wait until the provider has been started. If this flag is passed, the command will return immediately after acknowledgement from the host, without waiting for the provider to start. If this flag is omitted, the timeout will be adjusted to 30 seconds to account for provider download times]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':provider-ref -- Provider reference, e.g. the OCI URL for the provider:' \
':provider-id -- Unique provider ID to use for the provider:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__start__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-start-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(stop)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__stop_commands" \
"*::: :->stop" \
&& ret=0

    case $state in
    (stop)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-stop-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-id=[Id of host to stop component on. If a non-ID is provided, the host will be selected based on matching the prefix of the ID or the friendly name and will return an error if more than one host matches. If no host ID is passed, a host will be selected based on whether or not the component is running on it. If more than 1 host is running this component, an error will be returned with a list of hosts running the component]:HOST_ID: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--skip-wait[By default, the command will wait until the component has been stopped. If this flag is passed, the command will return immediately after acknowledgement from the host, without waiting for the component to stp\[\]]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component-id -- Unique component Id or a string to match on the prefix of the ID. If multiple components are matched, then an error will be returned with a list of all matching options:' \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-id=[Id of host to stop provider on. If a non-ID is provided, the host will be selected based on matching the prefix of the ID or the friendly name and will return an error if more than one host matches. If no host ID is passed, a host will be selected based on whether or not the provider is running on it. If more than 1 host is running this provider, an error will be returned with a list of hosts running the provider]:HOST_ID: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--skip-wait[By default, the command will wait until the provider has been stopped. If this flag is passed, the command will return immediately after acknowledgement from the host, without waiting for the provider to stop]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':provider-id -- Provider Id (e.g. the public key for the provider) or a string to match on the prefix of the ID, or friendly name, or call alias of the provider. If multiple providers are matched, then an error will be returned with a list of all matching options:' \
&& ret=0
;;
(host)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-timeout=[The timeout in ms for how much time to give the host for graceful shutdown]:HOST_SHUTDOWN_TIMEOUT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':host-id -- Id of host to stop. If a non-ID is provided, the host will be selected based on matching the prefix of the ID or the friendly name and will return an error if more than one host matches:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__stop__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-stop-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(host)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(label)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--delete[Delete the label, instead of adding it]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':host-id -- ID of host to update the component on. If a non-ID is provided, the host will be selected based on matching the prefix of the ID or the friendly name and will return an error if more than one host matches:' \
'*::label -- Host label in the form of a `\[key\]=\[value\]` pair, e.g. "cloud=aws". When `--delete` is set, only the key is provided:' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
":: :_wash__update_commands" \
"*::: :->update" \
&& ret=0

    case $state in
    (update)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-update-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
'-r+[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'--ctl-host=[CTL Host for connection, defaults to 127.0.0.1 for local nats]:CTL_HOST: ' \
'-p+[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-port=[CTL Port for connections, defaults to 4222 for local nats]:CTL_PORT: ' \
'--ctl-jwt=[JWT file for CTL authentication. Must be supplied with ctl_seed]:CTL_JWT: ' \
'--ctl-seed=[Seed file or literal for CTL authentication. Must be supplied with ctl_jwt]:CTL_SEED: ' \
'--ctl-credsfile=[Credsfile for CTL authentication. Combines ctl_seed and ctl_jwt. See https\://docs.nats.io/using-nats/developer/connecting/creds for details]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[TLS CA file for CTL authentication. See https\://docs.nats.io/using-nats/developer/connecting/tls for details]:CTL_TLS_CA_FILE:_files' \
'--js-domain=[JS domain for wasmcloud control interface. Defaults to None]:JS_DOMAIN: ' \
'-x+[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'--lattice=[Lattice name for wasmcloud control interface, defaults to "default"]:LATTICE: ' \
'-t+[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--timeout-ms=[Timeout length to await a control interface response, defaults to 2000 milliseconds]:TIMEOUT_MS: ' \
'--context=[Name of a context to use for CTL connection and authentication]:CONTEXT: ' \
'--host-id=[ID of host to update the component on. If a non-ID is provided, the host will be selected based on matching the prefix of the ID or the friendly name and will return an error if more than one host matches. If no host ID is passed, a host will be selected based on whether or not the component is running on it. If more than 1 host is running this component, an error will be returned with a list of hosts running the component]:HOST_ID: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
':component-id -- Unique ID of the component to update:' \
':new-component-ref -- Component reference to replace the current running comonent with, e.g. the absolute file path or OCI URL:' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__update__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-update-help-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(up)
_arguments "${_arguments_options[@]}" : \
'--nats-credsfile=[Optional path to a NATS credentials file to authenticate and extend existing NATS infrastructure]:NATS_CREDSFILE:_files' \
'--nats-config-file=[Optional path to a NATS config file NOTE\: If your configuration changes the address or port to listen on from 0.0.0.0\:4222, ensure you set --nats-host and --nats-port]:NATS_CONFIGFILE:_files' \
'--nats-remote-url=[Optional remote URL of existing NATS infrastructure to extend]:NATS_REMOTE_URL: ' \
'--nats-version=[NATS server version to download, e.g. \`v2.10.7\`. See https\://github.com/nats-io/nats-server/releases/ for releases]:NATS_VERSION: ' \
'--nats-host=[NATS server host to connect to]:NATS_HOST: ' \
'--nats-port=[NATS server port to connect to. This will be used as the NATS listen port if \`--nats-connect-only\` isn'\''t set]:NATS_PORT: ' \
'--nats-websocket-port=[NATS websocket port to use. TLS is not supported. This is required for the wash ui to connect from localhost]:NATS_WEBSOCKET_PORT: ' \
'--nats-js-domain=[NATS Server Jetstream domain for extending superclusters]:NATS_JS_DOMAIN: ' \
'--wasmcloud-version=[wasmCloud host version to download, e.g. \`v0.55.0\`. See https\://github.com/wasmCloud/wasmcloud/releases for releases]:WASMCLOUD_VERSION: ' \
'-x+[A unique identifier for a lattice, frequently used within NATS topics to isolate messages among different lattices]:LATTICE: ' \
'--lattice=[A unique identifier for a lattice, frequently used within NATS topics to isolate messages among different lattices]:LATTICE: ' \
'--host-seed=[The seed key (a printable 256-bit Ed25519 private key) used by this host to generate it'\''s public key]:HOST_SEED: ' \
'--rpc-host=[An IP address or DNS name to use to connect to NATS for RPC messages, defaults to the value supplied to --nats-host if not supplied]:RPC_HOST: ' \
'--rpc-port=[A port to use to connect to NATS for RPC messages, defaults to the value supplied to --nats-port if not supplied]:RPC_PORT: ' \
'--rpc-seed=[A seed nkey to use to authenticate to NATS for RPC messages]:RPC_SEED: ' \
'--rpc-timeout-ms=[Timeout in milliseconds for all RPC calls]:RPC_TIMEOUT_MS: ' \
'--rpc-jwt=[A user JWT to use to authenticate to NATS for RPC messages]:RPC_JWT: ' \
'--rpc-tls-ca-file=[A TLS CA file to use to authenticate to NATS for RPC messages]:RPC_TLS_CA_FILE:_files' \
'--rpc-credsfile=[Convenience flag for RPC authentication, internally this parses the JWT and seed from the credsfile]:RPC_CREDSFILE:_files' \
'--ctl-host=[An IP address or DNS name to use to connect to NATS for Control Interface (CTL) messages, defaults to the value supplied to --nats-host if not supplied]:CTL_HOST: ' \
'--ctl-port=[A port to use to connect to NATS for CTL messages, defaults to the value supplied to --nats-port if not supplied]:CTL_PORT: ' \
'--ctl-seed=[A seed nkey to use to authenticate to NATS for CTL messages]:CTL_SEED: ' \
'--ctl-jwt=[A user JWT to use to authenticate to NATS for CTL messages]:CTL_JWT: ' \
'--ctl-credsfile=[Convenience flag for CTL authentication, internally this parses the JWT and seed from the credsfile]:CTL_CREDSFILE:_files' \
'--ctl-tls-ca-file=[A TLS CA file to use to authenticate to NATS for CTL messages]:CTL_TLS_CA_FILE:_files' \
'--cluster-seed=[The seed key (a printable 256-bit Ed25519 private key) used by this host to sign all invocations]:CLUSTER_SEED: ' \
'*--cluster-issuers=[A comma-delimited list of public keys that can be used as issuers on signed invocations]:CLUSTER_ISSUERS: ' \
'--provider-delay=[Delay, in milliseconds, between requesting a provider shut down and forcibly terminating its process]:PROVIDER_DELAY: ' \
'*--allowed-insecure=[A comma-separated list of OCI hosts to which insecure (non-TLS) connections are allowed]:ALLOWED_INSECURE: ' \
'--wasmcloud-js-domain=[Jetstream domain name, configures a host to properly connect to a NATS supercluster]:WASMCLOUD_JS_DOMAIN: ' \
'--allow-file-load=[Denotes if a wasmCloud host should allow starting components from the file system]:ALLOW_FILE_LOAD:(true false)' \
'*-l+[A label to apply to the host, in the form of \`key=value\`. This flag can be repeated to supply multiple labels]:LABEL: ' \
'*--label=[A label to apply to the host, in the form of \`key=value\`. This flag can be repeated to supply multiple labels]:LABEL: ' \
'--log-level=[Controls the verbosity of JSON structured logs from the wasmCloud host]:STRUCTURED_LOG_LEVEL: ' \
'--max-execution-time-ms=[Defines the Max Execution time (in ms) that the host runtime will execute for]:MAX_EXECUTION_TIME: ' \
'--secrets-topic=[If provided, enables interfacing with a secrets backend for secret retrieval over the given topic prefix]:SECRETS_TOPIC: ' \
'--policy-topic=[If provided, enables policy checks on start actions and component invocations]:POLICY_TOPIC: ' \
'--wadm-version=[wadm version to download, e.g. \`v0.4.0\`. See https\://github.com/wasmCloud/wadm/releases for releases]:WADM_VERSION: ' \
'--wadm-js-domain=[The JetStream domain to use for wadm]:WADM_JS_DOMAIN: ' \
'--wadm-manifest=[The path to a wadm application manifest to run while the host is up]:WADM_MANIFEST:_files' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'-d[Launch NATS and wasmCloud detached from the current terminal as background processes]' \
'--detached[Launch NATS and wasmCloud detached from the current terminal as background processes]' \
'(--nats-remote-url)--nats-connect-only[If a connection can'\''t be established, exit and don'\''t start a NATS server. Will be ignored if a remote_url and credsfile are specified]' \
'--rpc-tls[Optional flag to enable host communication with a NATS server over TLS for RPC messages]' \
'--ctl-tls[Optional flag to enable host communication with a NATS server over TLS for CTL messages]' \
'--allow-latest[Determines whether OCI images tagged latest are allowed to be pulled from OCI registries and started]' \
'--config-service-enabled[Denotes if a wasmCloud host should issue requests to a config service on startup]' \
'--enable-structured-logging[Enable JSON structured logging from the wasmCloud host]' \
'--enable-ipv6[Enables IPV6 addressing for wasmCloud hosts]' \
'--wasmcloud-start-only[If enabled, wasmCloud will not be downloaded if it'\''s not installed]' \
'--multi-local[If enabled, allows starting additional wasmCloud hosts on this machine]' \
'--disable-wadm[If enabled, wadm will not be downloaded or run as a part of the up command]' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" : \
'-p+[Which port to run the UI on, defaults to 3030]:PORT: ' \
'--port=[Which port to run the UI on, defaults to 3030]:PORT: ' \
'-v+[Which version of the UI to run]:VERSION: ' \
'--version=[Which version of the UI to run]:VERSION: ' \
'-o+[Specify output format (text or json)]:OUTPUT: ' \
'--output=[Specify output format (text or json)]:OUTPUT: ' \
'--experimental[Whether or not to enable experimental features]' \
'(-h --help)--help-markdown[]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-command-$line[1]:"
        case $line[1] in
            (app)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__app_commands" \
"*::: :->app" \
&& ret=0

    case $state in
    (app)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-app-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(history)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(deploy)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(undeploy)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(build)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(call)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(capture)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__capture_commands" \
"*::: :->capture" \
&& ret=0

    case $state in
    (capture)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-capture-command-$line[1]:"
        case $line[1] in
            (replay)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(completions)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__completions_commands" \
"*::: :->completions" \
&& ret=0

    case $state in
    (completions)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-completions-command-$line[1]:"
        case $line[1] in
            (zsh)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(bash)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(fish)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(power-shell)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(claims)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__claims_commands" \
"*::: :->claims" \
&& ret=0

    case $state in
    (claims)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-claims-command-$line[1]:"
        case $line[1] in
            (inspect)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(sign)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(token)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__claims__token_commands" \
"*::: :->token" \
&& ret=0

    case $state in
    (token)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-claims-token-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(operator)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(account)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(config)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__config_commands" \
"*::: :->config" \
&& ret=0

    case $state in
    (config)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-config-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(ctx)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__ctx_commands" \
"*::: :->ctx" \
&& ret=0

    case $state in
    (ctx)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-ctx-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(new)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(default)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(edit)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(dev)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(down)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(drain)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__drain_commands" \
"*::: :->drain" \
&& ret=0

    case $state in
    (drain)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-drain-command-$line[1]:"
        case $line[1] in
            (all)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(oci)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(lib)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(downloads)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(get)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__get_commands" \
"*::: :->get" \
&& ret=0

    case $state in
    (get)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-get-command-$line[1]:"
        case $line[1] in
            (links)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(claims)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(hosts)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(inventory)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(inspect)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(keys)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__keys_commands" \
"*::: :->keys" \
&& ret=0

    case $state in
    (keys)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-keys-command-$line[1]:"
        case $line[1] in
            (gen)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(link)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__link_commands" \
"*::: :->link" \
&& ret=0

    case $state in
    (link)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-link-command-$line[1]:"
        case $line[1] in
            (query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(new)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__new_commands" \
"*::: :->new" \
&& ret=0

    case $state in
    (new)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-new-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(par)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__par_commands" \
"*::: :->par" \
&& ret=0

    case $state in
    (par)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-par-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(inspect)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(insert)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(plugin)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__plugin_commands" \
"*::: :->plugin" \
&& ret=0

    case $state in
    (plugin)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-plugin-command-$line[1]:"
        case $line[1] in
            (install)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(uninstall)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(push)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(pull)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(secrets)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__secrets_commands" \
"*::: :->secrets" \
&& ret=0

    case $state in
    (secrets)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-secrets-command-$line[1]:"
        case $line[1] in
            (put)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(del)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(spy)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(scale)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__scale_commands" \
"*::: :->scale" \
&& ret=0

    case $state in
    (scale)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-scale-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(start)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__start_commands" \
"*::: :->start" \
&& ret=0

    case $state in
    (start)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-start-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(stop)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__stop_commands" \
"*::: :->stop" \
&& ret=0

    case $state in
    (stop)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-stop-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(provider)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(host)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(label)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
":: :_wash__help__update_commands" \
"*::: :->update" \
&& ret=0

    case $state in
    (update)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:wash-help-update-command-$line[1]:"
        case $line[1] in
            (component)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(up)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(ui)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_wash_commands] )) ||
_wash_commands() {
    local commands; commands=(
'app:Manage declarative applications and deployments (wadm)' \
'build:Build (and sign) a wasmCloud component or capability provider' \
'call:Invoke a simple function on a component running in a wasmCloud host' \
'capture:Capture and debug cluster invocations and state' \
'completions:Generate shell completions' \
'claims:Generate and manage JWTs for wasmCloud components and capability providers' \
'config:Create configuration for components, capability providers and links' \
'ctx:Manage wasmCloud host configuration contexts' \
'dev:Start a developer loop to hot-reload a local wasmCloud component' \
'down:Tear down a wasmCloud environment launched with wash up' \
'drain:Manage contents of local wasmCloud caches' \
'get:Get information about different running wasmCloud resources' \
'inspect:Inspect a capability provider or Wasm component for signing information and interfaces' \
'keys:Utilities for generating and managing signing keys' \
'link:Link one component to another on a set of interfaces' \
'new:Create a new project from a template' \
'par:Create, inspect, and modify capability provider archive files' \
'plugin:Manage wash plugins' \
'push:Push an artifact to an OCI compliant registry' \
'pull:Pull an artifact from an OCI compliant registry' \
'secrets:Manage secret references' \
'spy:Spy on all invocations a component sends and receives' \
'scale:Scale a component running in a host to a certain level of concurrency' \
'start:Start a component or capability provider' \
'stop:Stop a component, capability provider, or host' \
'label:Label (or un-label) a host with a key=value label pair' \
'update:Update a component running in a host to newer image reference' \
'up:Bootstrap a wasmCloud environment' \
'ui:Serve a web UI for wasmCloud' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash commands' commands "$@"
}
(( $+functions[_wash__app_commands] )) ||
_wash__app_commands() {
    local commands; commands=(
'list:List all applications available within the lattice' \
'get:Get the application manifest for a specific version of an application' \
'status:Get the current status of a given application' \
'history:Get the version history of a given application' \
'delete:Delete an application version' \
'put:Create an application version by putting the manifest into the wadm store' \
'deploy:Deploy an application to the lattice' \
'undeploy:Undeploy an application, removing it from the lattice' \
'validate:Validate an application manifest' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash app commands' commands "$@"
}
(( $+functions[_wash__app__delete_commands] )) ||
_wash__app__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wash app delete commands' commands "$@"
}
(( $+functions[_wash__app__deploy_commands] )) ||
_wash__app__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash app deploy commands' commands "$@"
}
(( $+functions[_wash__app__get_commands] )) ||
_wash__app__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash app get commands' commands "$@"
}
(( $+functions[_wash__app__help_commands] )) ||
_wash__app__help_commands() {
    local commands; commands=(
'list:List all applications available within the lattice' \
'get:Get the application manifest for a specific version of an application' \
'status:Get the current status of a given application' \
'history:Get the version history of a given application' \
'delete:Delete an application version' \
'put:Create an application version by putting the manifest into the wadm store' \
'deploy:Deploy an application to the lattice' \
'undeploy:Undeploy an application, removing it from the lattice' \
'validate:Validate an application manifest' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash app help commands' commands "$@"
}
(( $+functions[_wash__app__help__delete_commands] )) ||
_wash__app__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help delete commands' commands "$@"
}
(( $+functions[_wash__app__help__deploy_commands] )) ||
_wash__app__help__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help deploy commands' commands "$@"
}
(( $+functions[_wash__app__help__get_commands] )) ||
_wash__app__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help get commands' commands "$@"
}
(( $+functions[_wash__app__help__help_commands] )) ||
_wash__app__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help help commands' commands "$@"
}
(( $+functions[_wash__app__help__history_commands] )) ||
_wash__app__help__history_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help history commands' commands "$@"
}
(( $+functions[_wash__app__help__list_commands] )) ||
_wash__app__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help list commands' commands "$@"
}
(( $+functions[_wash__app__help__put_commands] )) ||
_wash__app__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help put commands' commands "$@"
}
(( $+functions[_wash__app__help__status_commands] )) ||
_wash__app__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help status commands' commands "$@"
}
(( $+functions[_wash__app__help__undeploy_commands] )) ||
_wash__app__help__undeploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help undeploy commands' commands "$@"
}
(( $+functions[_wash__app__help__validate_commands] )) ||
_wash__app__help__validate_commands() {
    local commands; commands=()
    _describe -t commands 'wash app help validate commands' commands "$@"
}
(( $+functions[_wash__app__history_commands] )) ||
_wash__app__history_commands() {
    local commands; commands=()
    _describe -t commands 'wash app history commands' commands "$@"
}
(( $+functions[_wash__app__list_commands] )) ||
_wash__app__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash app list commands' commands "$@"
}
(( $+functions[_wash__app__put_commands] )) ||
_wash__app__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash app put commands' commands "$@"
}
(( $+functions[_wash__app__status_commands] )) ||
_wash__app__status_commands() {
    local commands; commands=()
    _describe -t commands 'wash app status commands' commands "$@"
}
(( $+functions[_wash__app__undeploy_commands] )) ||
_wash__app__undeploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash app undeploy commands' commands "$@"
}
(( $+functions[_wash__app__validate_commands] )) ||
_wash__app__validate_commands() {
    local commands; commands=()
    _describe -t commands 'wash app validate commands' commands "$@"
}
(( $+functions[_wash__build_commands] )) ||
_wash__build_commands() {
    local commands; commands=()
    _describe -t commands 'wash build commands' commands "$@"
}
(( $+functions[_wash__call_commands] )) ||
_wash__call_commands() {
    local commands; commands=()
    _describe -t commands 'wash call commands' commands "$@"
}
(( $+functions[_wash__capture_commands] )) ||
_wash__capture_commands() {
    local commands; commands=(
'replay:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash capture commands' commands "$@"
}
(( $+functions[_wash__capture__help_commands] )) ||
_wash__capture__help_commands() {
    local commands; commands=(
'replay:' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash capture help commands' commands "$@"
}
(( $+functions[_wash__capture__help__help_commands] )) ||
_wash__capture__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash capture help help commands' commands "$@"
}
(( $+functions[_wash__capture__help__replay_commands] )) ||
_wash__capture__help__replay_commands() {
    local commands; commands=()
    _describe -t commands 'wash capture help replay commands' commands "$@"
}
(( $+functions[_wash__capture__replay_commands] )) ||
_wash__capture__replay_commands() {
    local commands; commands=()
    _describe -t commands 'wash capture replay commands' commands "$@"
}
(( $+functions[_wash__claims_commands] )) ||
_wash__claims_commands() {
    local commands; commands=(
'inspect:Examine the signing claims information or WIT world from a signed component component' \
'sign:Sign a WebAssembly component, specifying capabilities and other claims including expiration, tags, and additional metadata' \
'token:Generate a signed JWT by supplying basic token information, a signing seed key, and metadata' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash claims commands' commands "$@"
}
(( $+functions[_wash__claims__help_commands] )) ||
_wash__claims__help_commands() {
    local commands; commands=(
'inspect:Examine the signing claims information or WIT world from a signed component component' \
'sign:Sign a WebAssembly component, specifying capabilities and other claims including expiration, tags, and additional metadata' \
'token:Generate a signed JWT by supplying basic token information, a signing seed key, and metadata' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash claims help commands' commands "$@"
}
(( $+functions[_wash__claims__help__help_commands] )) ||
_wash__claims__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help help commands' commands "$@"
}
(( $+functions[_wash__claims__help__inspect_commands] )) ||
_wash__claims__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help inspect commands' commands "$@"
}
(( $+functions[_wash__claims__help__sign_commands] )) ||
_wash__claims__help__sign_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help sign commands' commands "$@"
}
(( $+functions[_wash__claims__help__token_commands] )) ||
_wash__claims__help__token_commands() {
    local commands; commands=(
'component:Generate a signed JWT for an component module' \
'operator:Generate a signed JWT for an operator' \
'account:Generate a signed JWT for an account' \
'provider:Generate a signed JWT for a service (capability provider)' \
    )
    _describe -t commands 'wash claims help token commands' commands "$@"
}
(( $+functions[_wash__claims__help__token__account_commands] )) ||
_wash__claims__help__token__account_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help token account commands' commands "$@"
}
(( $+functions[_wash__claims__help__token__component_commands] )) ||
_wash__claims__help__token__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help token component commands' commands "$@"
}
(( $+functions[_wash__claims__help__token__operator_commands] )) ||
_wash__claims__help__token__operator_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help token operator commands' commands "$@"
}
(( $+functions[_wash__claims__help__token__provider_commands] )) ||
_wash__claims__help__token__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims help token provider commands' commands "$@"
}
(( $+functions[_wash__claims__inspect_commands] )) ||
_wash__claims__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims inspect commands' commands "$@"
}
(( $+functions[_wash__claims__sign_commands] )) ||
_wash__claims__sign_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims sign commands' commands "$@"
}
(( $+functions[_wash__claims__token_commands] )) ||
_wash__claims__token_commands() {
    local commands; commands=(
'component:Generate a signed JWT for an component module' \
'operator:Generate a signed JWT for an operator' \
'account:Generate a signed JWT for an account' \
'provider:Generate a signed JWT for a service (capability provider)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash claims token commands' commands "$@"
}
(( $+functions[_wash__claims__token__account_commands] )) ||
_wash__claims__token__account_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token account commands' commands "$@"
}
(( $+functions[_wash__claims__token__component_commands] )) ||
_wash__claims__token__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token component commands' commands "$@"
}
(( $+functions[_wash__claims__token__help_commands] )) ||
_wash__claims__token__help_commands() {
    local commands; commands=(
'component:Generate a signed JWT for an component module' \
'operator:Generate a signed JWT for an operator' \
'account:Generate a signed JWT for an account' \
'provider:Generate a signed JWT for a service (capability provider)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash claims token help commands' commands "$@"
}
(( $+functions[_wash__claims__token__help__account_commands] )) ||
_wash__claims__token__help__account_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token help account commands' commands "$@"
}
(( $+functions[_wash__claims__token__help__component_commands] )) ||
_wash__claims__token__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token help component commands' commands "$@"
}
(( $+functions[_wash__claims__token__help__help_commands] )) ||
_wash__claims__token__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token help help commands' commands "$@"
}
(( $+functions[_wash__claims__token__help__operator_commands] )) ||
_wash__claims__token__help__operator_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token help operator commands' commands "$@"
}
(( $+functions[_wash__claims__token__help__provider_commands] )) ||
_wash__claims__token__help__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token help provider commands' commands "$@"
}
(( $+functions[_wash__claims__token__operator_commands] )) ||
_wash__claims__token__operator_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token operator commands' commands "$@"
}
(( $+functions[_wash__claims__token__provider_commands] )) ||
_wash__claims__token__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash claims token provider commands' commands "$@"
}
(( $+functions[_wash__completions_commands] )) ||
_wash__completions_commands() {
    local commands; commands=(
'zsh:generate completions for Zsh' \
'bash:generate completions for Bash' \
'fish:generate completions for Fish' \
'power-shell:generate completions for PowerShell' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash completions commands' commands "$@"
}
(( $+functions[_wash__completions__bash_commands] )) ||
_wash__completions__bash_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions bash commands' commands "$@"
}
(( $+functions[_wash__completions__fish_commands] )) ||
_wash__completions__fish_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions fish commands' commands "$@"
}
(( $+functions[_wash__completions__help_commands] )) ||
_wash__completions__help_commands() {
    local commands; commands=(
'zsh:generate completions for Zsh' \
'bash:generate completions for Bash' \
'fish:generate completions for Fish' \
'power-shell:generate completions for PowerShell' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash completions help commands' commands "$@"
}
(( $+functions[_wash__completions__help__bash_commands] )) ||
_wash__completions__help__bash_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions help bash commands' commands "$@"
}
(( $+functions[_wash__completions__help__fish_commands] )) ||
_wash__completions__help__fish_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions help fish commands' commands "$@"
}
(( $+functions[_wash__completions__help__help_commands] )) ||
_wash__completions__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions help help commands' commands "$@"
}
(( $+functions[_wash__completions__help__power-shell_commands] )) ||
_wash__completions__help__power-shell_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions help power-shell commands' commands "$@"
}
(( $+functions[_wash__completions__help__zsh_commands] )) ||
_wash__completions__help__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions help zsh commands' commands "$@"
}
(( $+functions[_wash__completions__power-shell_commands] )) ||
_wash__completions__power-shell_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions power-shell commands' commands "$@"
}
(( $+functions[_wash__completions__zsh_commands] )) ||
_wash__completions__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'wash completions zsh commands' commands "$@"
}
(( $+functions[_wash__config_commands] )) ||
_wash__config_commands() {
    local commands; commands=(
'put:Put named configuration' \
'get:Get a named configuration' \
'del:Delete a named configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash config commands' commands "$@"
}
(( $+functions[_wash__config__del_commands] )) ||
_wash__config__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash config del commands' commands "$@"
}
(( $+functions[_wash__config__get_commands] )) ||
_wash__config__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash config get commands' commands "$@"
}
(( $+functions[_wash__config__help_commands] )) ||
_wash__config__help_commands() {
    local commands; commands=(
'put:Put named configuration' \
'get:Get a named configuration' \
'del:Delete a named configuration' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash config help commands' commands "$@"
}
(( $+functions[_wash__config__help__del_commands] )) ||
_wash__config__help__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash config help del commands' commands "$@"
}
(( $+functions[_wash__config__help__get_commands] )) ||
_wash__config__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash config help get commands' commands "$@"
}
(( $+functions[_wash__config__help__help_commands] )) ||
_wash__config__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash config help help commands' commands "$@"
}
(( $+functions[_wash__config__help__put_commands] )) ||
_wash__config__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash config help put commands' commands "$@"
}
(( $+functions[_wash__config__put_commands] )) ||
_wash__config__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash config put commands' commands "$@"
}
(( $+functions[_wash__ctx_commands] )) ||
_wash__ctx_commands() {
    local commands; commands=(
'list:Lists all stored contexts (JSON files) found in the context directory, with the exception of index.json' \
'del:Delete a stored context' \
'new:Create a new context' \
'default:Set the default context' \
'edit:Edit a context directly using a text editor' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash ctx commands' commands "$@"
}
(( $+functions[_wash__ctx__default_commands] )) ||
_wash__ctx__default_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx default commands' commands "$@"
}
(( $+functions[_wash__ctx__del_commands] )) ||
_wash__ctx__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx del commands' commands "$@"
}
(( $+functions[_wash__ctx__edit_commands] )) ||
_wash__ctx__edit_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx edit commands' commands "$@"
}
(( $+functions[_wash__ctx__help_commands] )) ||
_wash__ctx__help_commands() {
    local commands; commands=(
'list:Lists all stored contexts (JSON files) found in the context directory, with the exception of index.json' \
'del:Delete a stored context' \
'new:Create a new context' \
'default:Set the default context' \
'edit:Edit a context directly using a text editor' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash ctx help commands' commands "$@"
}
(( $+functions[_wash__ctx__help__default_commands] )) ||
_wash__ctx__help__default_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help default commands' commands "$@"
}
(( $+functions[_wash__ctx__help__del_commands] )) ||
_wash__ctx__help__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help del commands' commands "$@"
}
(( $+functions[_wash__ctx__help__edit_commands] )) ||
_wash__ctx__help__edit_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help edit commands' commands "$@"
}
(( $+functions[_wash__ctx__help__help_commands] )) ||
_wash__ctx__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help help commands' commands "$@"
}
(( $+functions[_wash__ctx__help__list_commands] )) ||
_wash__ctx__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help list commands' commands "$@"
}
(( $+functions[_wash__ctx__help__new_commands] )) ||
_wash__ctx__help__new_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx help new commands' commands "$@"
}
(( $+functions[_wash__ctx__list_commands] )) ||
_wash__ctx__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx list commands' commands "$@"
}
(( $+functions[_wash__ctx__new_commands] )) ||
_wash__ctx__new_commands() {
    local commands; commands=()
    _describe -t commands 'wash ctx new commands' commands "$@"
}
(( $+functions[_wash__dev_commands] )) ||
_wash__dev_commands() {
    local commands; commands=()
    _describe -t commands 'wash dev commands' commands "$@"
}
(( $+functions[_wash__down_commands] )) ||
_wash__down_commands() {
    local commands; commands=()
    _describe -t commands 'wash down commands' commands "$@"
}
(( $+functions[_wash__drain_commands] )) ||
_wash__drain_commands() {
    local commands; commands=(
'all:Remove all cached files created by wasmcloud' \
'oci:Remove cached files downloaded from OCI registries by wasmCloud' \
'lib:Remove cached binaries extracted from provider archives' \
'downloads:Remove downloaded and generated files from launching wasmCloud hosts' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash drain commands' commands "$@"
}
(( $+functions[_wash__drain__all_commands] )) ||
_wash__drain__all_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain all commands' commands "$@"
}
(( $+functions[_wash__drain__downloads_commands] )) ||
_wash__drain__downloads_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain downloads commands' commands "$@"
}
(( $+functions[_wash__drain__help_commands] )) ||
_wash__drain__help_commands() {
    local commands; commands=(
'all:Remove all cached files created by wasmcloud' \
'oci:Remove cached files downloaded from OCI registries by wasmCloud' \
'lib:Remove cached binaries extracted from provider archives' \
'downloads:Remove downloaded and generated files from launching wasmCloud hosts' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash drain help commands' commands "$@"
}
(( $+functions[_wash__drain__help__all_commands] )) ||
_wash__drain__help__all_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain help all commands' commands "$@"
}
(( $+functions[_wash__drain__help__downloads_commands] )) ||
_wash__drain__help__downloads_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain help downloads commands' commands "$@"
}
(( $+functions[_wash__drain__help__help_commands] )) ||
_wash__drain__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain help help commands' commands "$@"
}
(( $+functions[_wash__drain__help__lib_commands] )) ||
_wash__drain__help__lib_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain help lib commands' commands "$@"
}
(( $+functions[_wash__drain__help__oci_commands] )) ||
_wash__drain__help__oci_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain help oci commands' commands "$@"
}
(( $+functions[_wash__drain__lib_commands] )) ||
_wash__drain__lib_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain lib commands' commands "$@"
}
(( $+functions[_wash__drain__oci_commands] )) ||
_wash__drain__oci_commands() {
    local commands; commands=()
    _describe -t commands 'wash drain oci commands' commands "$@"
}
(( $+functions[_wash__get_commands] )) ||
_wash__get_commands() {
    local commands; commands=(
'links:Retrieve all known links in the lattice' \
'claims:Retrieve all known claims inside the lattice' \
'hosts:Retrieve all responsive hosts in the lattice' \
'inventory:Retrieve inventory a given host on in the lattice' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash get commands' commands "$@"
}
(( $+functions[_wash__get__claims_commands] )) ||
_wash__get__claims_commands() {
    local commands; commands=()
    _describe -t commands 'wash get claims commands' commands "$@"
}
(( $+functions[_wash__get__help_commands] )) ||
_wash__get__help_commands() {
    local commands; commands=(
'links:Retrieve all known links in the lattice' \
'claims:Retrieve all known claims inside the lattice' \
'hosts:Retrieve all responsive hosts in the lattice' \
'inventory:Retrieve inventory a given host on in the lattice' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash get help commands' commands "$@"
}
(( $+functions[_wash__get__help__claims_commands] )) ||
_wash__get__help__claims_commands() {
    local commands; commands=()
    _describe -t commands 'wash get help claims commands' commands "$@"
}
(( $+functions[_wash__get__help__help_commands] )) ||
_wash__get__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash get help help commands' commands "$@"
}
(( $+functions[_wash__get__help__hosts_commands] )) ||
_wash__get__help__hosts_commands() {
    local commands; commands=()
    _describe -t commands 'wash get help hosts commands' commands "$@"
}
(( $+functions[_wash__get__help__inventory_commands] )) ||
_wash__get__help__inventory_commands() {
    local commands; commands=()
    _describe -t commands 'wash get help inventory commands' commands "$@"
}
(( $+functions[_wash__get__help__links_commands] )) ||
_wash__get__help__links_commands() {
    local commands; commands=()
    _describe -t commands 'wash get help links commands' commands "$@"
}
(( $+functions[_wash__get__hosts_commands] )) ||
_wash__get__hosts_commands() {
    local commands; commands=()
    _describe -t commands 'wash get hosts commands' commands "$@"
}
(( $+functions[_wash__get__inventory_commands] )) ||
_wash__get__inventory_commands() {
    local commands; commands=()
    _describe -t commands 'wash get inventory commands' commands "$@"
}
(( $+functions[_wash__get__links_commands] )) ||
_wash__get__links_commands() {
    local commands; commands=()
    _describe -t commands 'wash get links commands' commands "$@"
}
(( $+functions[_wash__help_commands] )) ||
_wash__help_commands() {
    local commands; commands=(
'app:Manage declarative applications and deployments (wadm)' \
'build:Build (and sign) a wasmCloud component or capability provider' \
'call:Invoke a simple function on a component running in a wasmCloud host' \
'capture:Capture and debug cluster invocations and state' \
'completions:Generate shell completions' \
'claims:Generate and manage JWTs for wasmCloud components and capability providers' \
'config:Create configuration for components, capability providers and links' \
'ctx:Manage wasmCloud host configuration contexts' \
'dev:Start a developer loop to hot-reload a local wasmCloud component' \
'down:Tear down a wasmCloud environment launched with wash up' \
'drain:Manage contents of local wasmCloud caches' \
'get:Get information about different running wasmCloud resources' \
'inspect:Inspect a capability provider or Wasm component for signing information and interfaces' \
'keys:Utilities for generating and managing signing keys' \
'link:Link one component to another on a set of interfaces' \
'new:Create a new project from a template' \
'par:Create, inspect, and modify capability provider archive files' \
'plugin:Manage wash plugins' \
'push:Push an artifact to an OCI compliant registry' \
'pull:Pull an artifact from an OCI compliant registry' \
'secrets:Manage secret references' \
'spy:Spy on all invocations a component sends and receives' \
'scale:Scale a component running in a host to a certain level of concurrency' \
'start:Start a component or capability provider' \
'stop:Stop a component, capability provider, or host' \
'label:Label (or un-label) a host with a key=value label pair' \
'update:Update a component running in a host to newer image reference' \
'up:Bootstrap a wasmCloud environment' \
'ui:Serve a web UI for wasmCloud' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash help commands' commands "$@"
}
(( $+functions[_wash__help__app_commands] )) ||
_wash__help__app_commands() {
    local commands; commands=(
'list:List all applications available within the lattice' \
'get:Get the application manifest for a specific version of an application' \
'status:Get the current status of a given application' \
'history:Get the version history of a given application' \
'delete:Delete an application version' \
'put:Create an application version by putting the manifest into the wadm store' \
'deploy:Deploy an application to the lattice' \
'undeploy:Undeploy an application, removing it from the lattice' \
'validate:Validate an application manifest' \
    )
    _describe -t commands 'wash help app commands' commands "$@"
}
(( $+functions[_wash__help__app__delete_commands] )) ||
_wash__help__app__delete_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app delete commands' commands "$@"
}
(( $+functions[_wash__help__app__deploy_commands] )) ||
_wash__help__app__deploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app deploy commands' commands "$@"
}
(( $+functions[_wash__help__app__get_commands] )) ||
_wash__help__app__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app get commands' commands "$@"
}
(( $+functions[_wash__help__app__history_commands] )) ||
_wash__help__app__history_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app history commands' commands "$@"
}
(( $+functions[_wash__help__app__list_commands] )) ||
_wash__help__app__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app list commands' commands "$@"
}
(( $+functions[_wash__help__app__put_commands] )) ||
_wash__help__app__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app put commands' commands "$@"
}
(( $+functions[_wash__help__app__status_commands] )) ||
_wash__help__app__status_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app status commands' commands "$@"
}
(( $+functions[_wash__help__app__undeploy_commands] )) ||
_wash__help__app__undeploy_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app undeploy commands' commands "$@"
}
(( $+functions[_wash__help__app__validate_commands] )) ||
_wash__help__app__validate_commands() {
    local commands; commands=()
    _describe -t commands 'wash help app validate commands' commands "$@"
}
(( $+functions[_wash__help__build_commands] )) ||
_wash__help__build_commands() {
    local commands; commands=()
    _describe -t commands 'wash help build commands' commands "$@"
}
(( $+functions[_wash__help__call_commands] )) ||
_wash__help__call_commands() {
    local commands; commands=()
    _describe -t commands 'wash help call commands' commands "$@"
}
(( $+functions[_wash__help__capture_commands] )) ||
_wash__help__capture_commands() {
    local commands; commands=(
'replay:' \
    )
    _describe -t commands 'wash help capture commands' commands "$@"
}
(( $+functions[_wash__help__capture__replay_commands] )) ||
_wash__help__capture__replay_commands() {
    local commands; commands=()
    _describe -t commands 'wash help capture replay commands' commands "$@"
}
(( $+functions[_wash__help__claims_commands] )) ||
_wash__help__claims_commands() {
    local commands; commands=(
'inspect:Examine the signing claims information or WIT world from a signed component component' \
'sign:Sign a WebAssembly component, specifying capabilities and other claims including expiration, tags, and additional metadata' \
'token:Generate a signed JWT by supplying basic token information, a signing seed key, and metadata' \
    )
    _describe -t commands 'wash help claims commands' commands "$@"
}
(( $+functions[_wash__help__claims__inspect_commands] )) ||
_wash__help__claims__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims inspect commands' commands "$@"
}
(( $+functions[_wash__help__claims__sign_commands] )) ||
_wash__help__claims__sign_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims sign commands' commands "$@"
}
(( $+functions[_wash__help__claims__token_commands] )) ||
_wash__help__claims__token_commands() {
    local commands; commands=(
'component:Generate a signed JWT for an component module' \
'operator:Generate a signed JWT for an operator' \
'account:Generate a signed JWT for an account' \
'provider:Generate a signed JWT for a service (capability provider)' \
    )
    _describe -t commands 'wash help claims token commands' commands "$@"
}
(( $+functions[_wash__help__claims__token__account_commands] )) ||
_wash__help__claims__token__account_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims token account commands' commands "$@"
}
(( $+functions[_wash__help__claims__token__component_commands] )) ||
_wash__help__claims__token__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims token component commands' commands "$@"
}
(( $+functions[_wash__help__claims__token__operator_commands] )) ||
_wash__help__claims__token__operator_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims token operator commands' commands "$@"
}
(( $+functions[_wash__help__claims__token__provider_commands] )) ||
_wash__help__claims__token__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash help claims token provider commands' commands "$@"
}
(( $+functions[_wash__help__completions_commands] )) ||
_wash__help__completions_commands() {
    local commands; commands=(
'zsh:generate completions for Zsh' \
'bash:generate completions for Bash' \
'fish:generate completions for Fish' \
'power-shell:generate completions for PowerShell' \
    )
    _describe -t commands 'wash help completions commands' commands "$@"
}
(( $+functions[_wash__help__completions__bash_commands] )) ||
_wash__help__completions__bash_commands() {
    local commands; commands=()
    _describe -t commands 'wash help completions bash commands' commands "$@"
}
(( $+functions[_wash__help__completions__fish_commands] )) ||
_wash__help__completions__fish_commands() {
    local commands; commands=()
    _describe -t commands 'wash help completions fish commands' commands "$@"
}
(( $+functions[_wash__help__completions__power-shell_commands] )) ||
_wash__help__completions__power-shell_commands() {
    local commands; commands=()
    _describe -t commands 'wash help completions power-shell commands' commands "$@"
}
(( $+functions[_wash__help__completions__zsh_commands] )) ||
_wash__help__completions__zsh_commands() {
    local commands; commands=()
    _describe -t commands 'wash help completions zsh commands' commands "$@"
}
(( $+functions[_wash__help__config_commands] )) ||
_wash__help__config_commands() {
    local commands; commands=(
'put:Put named configuration' \
'get:Get a named configuration' \
'del:Delete a named configuration' \
    )
    _describe -t commands 'wash help config commands' commands "$@"
}
(( $+functions[_wash__help__config__del_commands] )) ||
_wash__help__config__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash help config del commands' commands "$@"
}
(( $+functions[_wash__help__config__get_commands] )) ||
_wash__help__config__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash help config get commands' commands "$@"
}
(( $+functions[_wash__help__config__put_commands] )) ||
_wash__help__config__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash help config put commands' commands "$@"
}
(( $+functions[_wash__help__ctx_commands] )) ||
_wash__help__ctx_commands() {
    local commands; commands=(
'list:Lists all stored contexts (JSON files) found in the context directory, with the exception of index.json' \
'del:Delete a stored context' \
'new:Create a new context' \
'default:Set the default context' \
'edit:Edit a context directly using a text editor' \
    )
    _describe -t commands 'wash help ctx commands' commands "$@"
}
(( $+functions[_wash__help__ctx__default_commands] )) ||
_wash__help__ctx__default_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ctx default commands' commands "$@"
}
(( $+functions[_wash__help__ctx__del_commands] )) ||
_wash__help__ctx__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ctx del commands' commands "$@"
}
(( $+functions[_wash__help__ctx__edit_commands] )) ||
_wash__help__ctx__edit_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ctx edit commands' commands "$@"
}
(( $+functions[_wash__help__ctx__list_commands] )) ||
_wash__help__ctx__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ctx list commands' commands "$@"
}
(( $+functions[_wash__help__ctx__new_commands] )) ||
_wash__help__ctx__new_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ctx new commands' commands "$@"
}
(( $+functions[_wash__help__dev_commands] )) ||
_wash__help__dev_commands() {
    local commands; commands=()
    _describe -t commands 'wash help dev commands' commands "$@"
}
(( $+functions[_wash__help__down_commands] )) ||
_wash__help__down_commands() {
    local commands; commands=()
    _describe -t commands 'wash help down commands' commands "$@"
}
(( $+functions[_wash__help__drain_commands] )) ||
_wash__help__drain_commands() {
    local commands; commands=(
'all:Remove all cached files created by wasmcloud' \
'oci:Remove cached files downloaded from OCI registries by wasmCloud' \
'lib:Remove cached binaries extracted from provider archives' \
'downloads:Remove downloaded and generated files from launching wasmCloud hosts' \
    )
    _describe -t commands 'wash help drain commands' commands "$@"
}
(( $+functions[_wash__help__drain__all_commands] )) ||
_wash__help__drain__all_commands() {
    local commands; commands=()
    _describe -t commands 'wash help drain all commands' commands "$@"
}
(( $+functions[_wash__help__drain__downloads_commands] )) ||
_wash__help__drain__downloads_commands() {
    local commands; commands=()
    _describe -t commands 'wash help drain downloads commands' commands "$@"
}
(( $+functions[_wash__help__drain__lib_commands] )) ||
_wash__help__drain__lib_commands() {
    local commands; commands=()
    _describe -t commands 'wash help drain lib commands' commands "$@"
}
(( $+functions[_wash__help__drain__oci_commands] )) ||
_wash__help__drain__oci_commands() {
    local commands; commands=()
    _describe -t commands 'wash help drain oci commands' commands "$@"
}
(( $+functions[_wash__help__get_commands] )) ||
_wash__help__get_commands() {
    local commands; commands=(
'links:Retrieve all known links in the lattice' \
'claims:Retrieve all known claims inside the lattice' \
'hosts:Retrieve all responsive hosts in the lattice' \
'inventory:Retrieve inventory a given host on in the lattice' \
    )
    _describe -t commands 'wash help get commands' commands "$@"
}
(( $+functions[_wash__help__get__claims_commands] )) ||
_wash__help__get__claims_commands() {
    local commands; commands=()
    _describe -t commands 'wash help get claims commands' commands "$@"
}
(( $+functions[_wash__help__get__hosts_commands] )) ||
_wash__help__get__hosts_commands() {
    local commands; commands=()
    _describe -t commands 'wash help get hosts commands' commands "$@"
}
(( $+functions[_wash__help__get__inventory_commands] )) ||
_wash__help__get__inventory_commands() {
    local commands; commands=()
    _describe -t commands 'wash help get inventory commands' commands "$@"
}
(( $+functions[_wash__help__get__links_commands] )) ||
_wash__help__get__links_commands() {
    local commands; commands=()
    _describe -t commands 'wash help get links commands' commands "$@"
}
(( $+functions[_wash__help__help_commands] )) ||
_wash__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash help help commands' commands "$@"
}
(( $+functions[_wash__help__inspect_commands] )) ||
_wash__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash help inspect commands' commands "$@"
}
(( $+functions[_wash__help__keys_commands] )) ||
_wash__help__keys_commands() {
    local commands; commands=(
'gen:Generates a keypair' \
'get:Retrieves a keypair and prints the contents' \
'list:Lists all keypairs in a directory' \
    )
    _describe -t commands 'wash help keys commands' commands "$@"
}
(( $+functions[_wash__help__keys__gen_commands] )) ||
_wash__help__keys__gen_commands() {
    local commands; commands=()
    _describe -t commands 'wash help keys gen commands' commands "$@"
}
(( $+functions[_wash__help__keys__get_commands] )) ||
_wash__help__keys__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash help keys get commands' commands "$@"
}
(( $+functions[_wash__help__keys__list_commands] )) ||
_wash__help__keys__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash help keys list commands' commands "$@"
}
(( $+functions[_wash__help__label_commands] )) ||
_wash__help__label_commands() {
    local commands; commands=()
    _describe -t commands 'wash help label commands' commands "$@"
}
(( $+functions[_wash__help__link_commands] )) ||
_wash__help__link_commands() {
    local commands; commands=(
'query:Query all links, same as \`wash get links\`' \
'put:Put a link from a source to a target on a given WIT interface' \
'del:Delete a link' \
    )
    _describe -t commands 'wash help link commands' commands "$@"
}
(( $+functions[_wash__help__link__del_commands] )) ||
_wash__help__link__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash help link del commands' commands "$@"
}
(( $+functions[_wash__help__link__put_commands] )) ||
_wash__help__link__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash help link put commands' commands "$@"
}
(( $+functions[_wash__help__link__query_commands] )) ||
_wash__help__link__query_commands() {
    local commands; commands=()
    _describe -t commands 'wash help link query commands' commands "$@"
}
(( $+functions[_wash__help__new_commands] )) ||
_wash__help__new_commands() {
    local commands; commands=(
'component:Generate a wasmCloud component project' \
'provider:Generate a new capability provider project' \
    )
    _describe -t commands 'wash help new commands' commands "$@"
}
(( $+functions[_wash__help__new__component_commands] )) ||
_wash__help__new__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help new component commands' commands "$@"
}
(( $+functions[_wash__help__new__provider_commands] )) ||
_wash__help__new__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash help new provider commands' commands "$@"
}
(( $+functions[_wash__help__par_commands] )) ||
_wash__help__par_commands() {
    local commands; commands=(
'create:Build a provider archive file' \
'inspect:Inspect a provider archive file' \
'insert:Insert a provider into a provider archive file' \
    )
    _describe -t commands 'wash help par commands' commands "$@"
}
(( $+functions[_wash__help__par__create_commands] )) ||
_wash__help__par__create_commands() {
    local commands; commands=()
    _describe -t commands 'wash help par create commands' commands "$@"
}
(( $+functions[_wash__help__par__insert_commands] )) ||
_wash__help__par__insert_commands() {
    local commands; commands=()
    _describe -t commands 'wash help par insert commands' commands "$@"
}
(( $+functions[_wash__help__par__inspect_commands] )) ||
_wash__help__par__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash help par inspect commands' commands "$@"
}
(( $+functions[_wash__help__plugin_commands] )) ||
_wash__help__plugin_commands() {
    local commands; commands=(
'install:Install a wash plugin' \
'uninstall:Uninstall a plugin' \
'list:List installed plugins' \
    )
    _describe -t commands 'wash help plugin commands' commands "$@"
}
(( $+functions[_wash__help__plugin__install_commands] )) ||
_wash__help__plugin__install_commands() {
    local commands; commands=()
    _describe -t commands 'wash help plugin install commands' commands "$@"
}
(( $+functions[_wash__help__plugin__list_commands] )) ||
_wash__help__plugin__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash help plugin list commands' commands "$@"
}
(( $+functions[_wash__help__plugin__uninstall_commands] )) ||
_wash__help__plugin__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'wash help plugin uninstall commands' commands "$@"
}
(( $+functions[_wash__help__pull_commands] )) ||
_wash__help__pull_commands() {
    local commands; commands=()
    _describe -t commands 'wash help pull commands' commands "$@"
}
(( $+functions[_wash__help__push_commands] )) ||
_wash__help__push_commands() {
    local commands; commands=()
    _describe -t commands 'wash help push commands' commands "$@"
}
(( $+functions[_wash__help__scale_commands] )) ||
_wash__help__scale_commands() {
    local commands; commands=(
'component:Scale a component running in a host to a certain level of concurrency' \
    )
    _describe -t commands 'wash help scale commands' commands "$@"
}
(( $+functions[_wash__help__scale__component_commands] )) ||
_wash__help__scale__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help scale component commands' commands "$@"
}
(( $+functions[_wash__help__secrets_commands] )) ||
_wash__help__secrets_commands() {
    local commands; commands=(
'put:Put secret reference' \
'get:Get a secret reference by name' \
'del:Delete a secret reference by name' \
    )
    _describe -t commands 'wash help secrets commands' commands "$@"
}
(( $+functions[_wash__help__secrets__del_commands] )) ||
_wash__help__secrets__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash help secrets del commands' commands "$@"
}
(( $+functions[_wash__help__secrets__get_commands] )) ||
_wash__help__secrets__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash help secrets get commands' commands "$@"
}
(( $+functions[_wash__help__secrets__put_commands] )) ||
_wash__help__secrets__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash help secrets put commands' commands "$@"
}
(( $+functions[_wash__help__spy_commands] )) ||
_wash__help__spy_commands() {
    local commands; commands=()
    _describe -t commands 'wash help spy commands' commands "$@"
}
(( $+functions[_wash__help__start_commands] )) ||
_wash__help__start_commands() {
    local commands; commands=(
'component:Launch a component in a host' \
'provider:Launch a provider in a host' \
    )
    _describe -t commands 'wash help start commands' commands "$@"
}
(( $+functions[_wash__help__start__component_commands] )) ||
_wash__help__start__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help start component commands' commands "$@"
}
(( $+functions[_wash__help__start__provider_commands] )) ||
_wash__help__start__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash help start provider commands' commands "$@"
}
(( $+functions[_wash__help__stop_commands] )) ||
_wash__help__stop_commands() {
    local commands; commands=(
'component:Stop a component running in a host' \
'provider:Stop a provider running in a host' \
'host:Purge and stop a running host' \
    )
    _describe -t commands 'wash help stop commands' commands "$@"
}
(( $+functions[_wash__help__stop__component_commands] )) ||
_wash__help__stop__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help stop component commands' commands "$@"
}
(( $+functions[_wash__help__stop__host_commands] )) ||
_wash__help__stop__host_commands() {
    local commands; commands=()
    _describe -t commands 'wash help stop host commands' commands "$@"
}
(( $+functions[_wash__help__stop__provider_commands] )) ||
_wash__help__stop__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash help stop provider commands' commands "$@"
}
(( $+functions[_wash__help__ui_commands] )) ||
_wash__help__ui_commands() {
    local commands; commands=()
    _describe -t commands 'wash help ui commands' commands "$@"
}
(( $+functions[_wash__help__up_commands] )) ||
_wash__help__up_commands() {
    local commands; commands=()
    _describe -t commands 'wash help up commands' commands "$@"
}
(( $+functions[_wash__help__update_commands] )) ||
_wash__help__update_commands() {
    local commands; commands=(
'component:Update a component running in a host to a newer version' \
    )
    _describe -t commands 'wash help update commands' commands "$@"
}
(( $+functions[_wash__help__update__component_commands] )) ||
_wash__help__update__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash help update component commands' commands "$@"
}
(( $+functions[_wash__inspect_commands] )) ||
_wash__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash inspect commands' commands "$@"
}
(( $+functions[_wash__keys_commands] )) ||
_wash__keys_commands() {
    local commands; commands=(
'gen:Generates a keypair' \
'get:Retrieves a keypair and prints the contents' \
'list:Lists all keypairs in a directory' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash keys commands' commands "$@"
}
(( $+functions[_wash__keys__gen_commands] )) ||
_wash__keys__gen_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys gen commands' commands "$@"
}
(( $+functions[_wash__keys__get_commands] )) ||
_wash__keys__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys get commands' commands "$@"
}
(( $+functions[_wash__keys__help_commands] )) ||
_wash__keys__help_commands() {
    local commands; commands=(
'gen:Generates a keypair' \
'get:Retrieves a keypair and prints the contents' \
'list:Lists all keypairs in a directory' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash keys help commands' commands "$@"
}
(( $+functions[_wash__keys__help__gen_commands] )) ||
_wash__keys__help__gen_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys help gen commands' commands "$@"
}
(( $+functions[_wash__keys__help__get_commands] )) ||
_wash__keys__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys help get commands' commands "$@"
}
(( $+functions[_wash__keys__help__help_commands] )) ||
_wash__keys__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys help help commands' commands "$@"
}
(( $+functions[_wash__keys__help__list_commands] )) ||
_wash__keys__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys help list commands' commands "$@"
}
(( $+functions[_wash__keys__list_commands] )) ||
_wash__keys__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash keys list commands' commands "$@"
}
(( $+functions[_wash__label_commands] )) ||
_wash__label_commands() {
    local commands; commands=()
    _describe -t commands 'wash label commands' commands "$@"
}
(( $+functions[_wash__link_commands] )) ||
_wash__link_commands() {
    local commands; commands=(
'query:Query all links, same as \`wash get links\`' \
'put:Put a link from a source to a target on a given WIT interface' \
'del:Delete a link' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash link commands' commands "$@"
}
(( $+functions[_wash__link__del_commands] )) ||
_wash__link__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash link del commands' commands "$@"
}
(( $+functions[_wash__link__help_commands] )) ||
_wash__link__help_commands() {
    local commands; commands=(
'query:Query all links, same as \`wash get links\`' \
'put:Put a link from a source to a target on a given WIT interface' \
'del:Delete a link' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash link help commands' commands "$@"
}
(( $+functions[_wash__link__help__del_commands] )) ||
_wash__link__help__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash link help del commands' commands "$@"
}
(( $+functions[_wash__link__help__help_commands] )) ||
_wash__link__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash link help help commands' commands "$@"
}
(( $+functions[_wash__link__help__put_commands] )) ||
_wash__link__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash link help put commands' commands "$@"
}
(( $+functions[_wash__link__help__query_commands] )) ||
_wash__link__help__query_commands() {
    local commands; commands=()
    _describe -t commands 'wash link help query commands' commands "$@"
}
(( $+functions[_wash__link__put_commands] )) ||
_wash__link__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash link put commands' commands "$@"
}
(( $+functions[_wash__link__query_commands] )) ||
_wash__link__query_commands() {
    local commands; commands=()
    _describe -t commands 'wash link query commands' commands "$@"
}
(( $+functions[_wash__new_commands] )) ||
_wash__new_commands() {
    local commands; commands=(
'component:Generate a wasmCloud component project' \
'provider:Generate a new capability provider project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash new commands' commands "$@"
}
(( $+functions[_wash__new__component_commands] )) ||
_wash__new__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash new component commands' commands "$@"
}
(( $+functions[_wash__new__help_commands] )) ||
_wash__new__help_commands() {
    local commands; commands=(
'component:Generate a wasmCloud component project' \
'provider:Generate a new capability provider project' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash new help commands' commands "$@"
}
(( $+functions[_wash__new__help__component_commands] )) ||
_wash__new__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash new help component commands' commands "$@"
}
(( $+functions[_wash__new__help__help_commands] )) ||
_wash__new__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash new help help commands' commands "$@"
}
(( $+functions[_wash__new__help__provider_commands] )) ||
_wash__new__help__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash new help provider commands' commands "$@"
}
(( $+functions[_wash__new__provider_commands] )) ||
_wash__new__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash new provider commands' commands "$@"
}
(( $+functions[_wash__par_commands] )) ||
_wash__par_commands() {
    local commands; commands=(
'create:Build a provider archive file' \
'inspect:Inspect a provider archive file' \
'insert:Insert a provider into a provider archive file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash par commands' commands "$@"
}
(( $+functions[_wash__par__create_commands] )) ||
_wash__par__create_commands() {
    local commands; commands=()
    _describe -t commands 'wash par create commands' commands "$@"
}
(( $+functions[_wash__par__help_commands] )) ||
_wash__par__help_commands() {
    local commands; commands=(
'create:Build a provider archive file' \
'inspect:Inspect a provider archive file' \
'insert:Insert a provider into a provider archive file' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash par help commands' commands "$@"
}
(( $+functions[_wash__par__help__create_commands] )) ||
_wash__par__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'wash par help create commands' commands "$@"
}
(( $+functions[_wash__par__help__help_commands] )) ||
_wash__par__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash par help help commands' commands "$@"
}
(( $+functions[_wash__par__help__insert_commands] )) ||
_wash__par__help__insert_commands() {
    local commands; commands=()
    _describe -t commands 'wash par help insert commands' commands "$@"
}
(( $+functions[_wash__par__help__inspect_commands] )) ||
_wash__par__help__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash par help inspect commands' commands "$@"
}
(( $+functions[_wash__par__insert_commands] )) ||
_wash__par__insert_commands() {
    local commands; commands=()
    _describe -t commands 'wash par insert commands' commands "$@"
}
(( $+functions[_wash__par__inspect_commands] )) ||
_wash__par__inspect_commands() {
    local commands; commands=()
    _describe -t commands 'wash par inspect commands' commands "$@"
}
(( $+functions[_wash__plugin_commands] )) ||
_wash__plugin_commands() {
    local commands; commands=(
'install:Install a wash plugin' \
'uninstall:Uninstall a plugin' \
'list:List installed plugins' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash plugin commands' commands "$@"
}
(( $+functions[_wash__plugin__help_commands] )) ||
_wash__plugin__help_commands() {
    local commands; commands=(
'install:Install a wash plugin' \
'uninstall:Uninstall a plugin' \
'list:List installed plugins' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash plugin help commands' commands "$@"
}
(( $+functions[_wash__plugin__help__help_commands] )) ||
_wash__plugin__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin help help commands' commands "$@"
}
(( $+functions[_wash__plugin__help__install_commands] )) ||
_wash__plugin__help__install_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin help install commands' commands "$@"
}
(( $+functions[_wash__plugin__help__list_commands] )) ||
_wash__plugin__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin help list commands' commands "$@"
}
(( $+functions[_wash__plugin__help__uninstall_commands] )) ||
_wash__plugin__help__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin help uninstall commands' commands "$@"
}
(( $+functions[_wash__plugin__install_commands] )) ||
_wash__plugin__install_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin install commands' commands "$@"
}
(( $+functions[_wash__plugin__list_commands] )) ||
_wash__plugin__list_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin list commands' commands "$@"
}
(( $+functions[_wash__plugin__uninstall_commands] )) ||
_wash__plugin__uninstall_commands() {
    local commands; commands=()
    _describe -t commands 'wash plugin uninstall commands' commands "$@"
}
(( $+functions[_wash__pull_commands] )) ||
_wash__pull_commands() {
    local commands; commands=()
    _describe -t commands 'wash pull commands' commands "$@"
}
(( $+functions[_wash__push_commands] )) ||
_wash__push_commands() {
    local commands; commands=()
    _describe -t commands 'wash push commands' commands "$@"
}
(( $+functions[_wash__scale_commands] )) ||
_wash__scale_commands() {
    local commands; commands=(
'component:Scale a component running in a host to a certain level of concurrency' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash scale commands' commands "$@"
}
(( $+functions[_wash__scale__component_commands] )) ||
_wash__scale__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash scale component commands' commands "$@"
}
(( $+functions[_wash__scale__help_commands] )) ||
_wash__scale__help_commands() {
    local commands; commands=(
'component:Scale a component running in a host to a certain level of concurrency' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash scale help commands' commands "$@"
}
(( $+functions[_wash__scale__help__component_commands] )) ||
_wash__scale__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash scale help component commands' commands "$@"
}
(( $+functions[_wash__scale__help__help_commands] )) ||
_wash__scale__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash scale help help commands' commands "$@"
}
(( $+functions[_wash__secrets_commands] )) ||
_wash__secrets_commands() {
    local commands; commands=(
'put:Put secret reference' \
'get:Get a secret reference by name' \
'del:Delete a secret reference by name' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash secrets commands' commands "$@"
}
(( $+functions[_wash__secrets__del_commands] )) ||
_wash__secrets__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets del commands' commands "$@"
}
(( $+functions[_wash__secrets__get_commands] )) ||
_wash__secrets__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets get commands' commands "$@"
}
(( $+functions[_wash__secrets__help_commands] )) ||
_wash__secrets__help_commands() {
    local commands; commands=(
'put:Put secret reference' \
'get:Get a secret reference by name' \
'del:Delete a secret reference by name' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash secrets help commands' commands "$@"
}
(( $+functions[_wash__secrets__help__del_commands] )) ||
_wash__secrets__help__del_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets help del commands' commands "$@"
}
(( $+functions[_wash__secrets__help__get_commands] )) ||
_wash__secrets__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets help get commands' commands "$@"
}
(( $+functions[_wash__secrets__help__help_commands] )) ||
_wash__secrets__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets help help commands' commands "$@"
}
(( $+functions[_wash__secrets__help__put_commands] )) ||
_wash__secrets__help__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets help put commands' commands "$@"
}
(( $+functions[_wash__secrets__put_commands] )) ||
_wash__secrets__put_commands() {
    local commands; commands=()
    _describe -t commands 'wash secrets put commands' commands "$@"
}
(( $+functions[_wash__spy_commands] )) ||
_wash__spy_commands() {
    local commands; commands=()
    _describe -t commands 'wash spy commands' commands "$@"
}
(( $+functions[_wash__start_commands] )) ||
_wash__start_commands() {
    local commands; commands=(
'component:Launch a component in a host' \
'provider:Launch a provider in a host' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash start commands' commands "$@"
}
(( $+functions[_wash__start__component_commands] )) ||
_wash__start__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash start component commands' commands "$@"
}
(( $+functions[_wash__start__help_commands] )) ||
_wash__start__help_commands() {
    local commands; commands=(
'component:Launch a component in a host' \
'provider:Launch a provider in a host' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash start help commands' commands "$@"
}
(( $+functions[_wash__start__help__component_commands] )) ||
_wash__start__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash start help component commands' commands "$@"
}
(( $+functions[_wash__start__help__help_commands] )) ||
_wash__start__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash start help help commands' commands "$@"
}
(( $+functions[_wash__start__help__provider_commands] )) ||
_wash__start__help__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash start help provider commands' commands "$@"
}
(( $+functions[_wash__start__provider_commands] )) ||
_wash__start__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash start provider commands' commands "$@"
}
(( $+functions[_wash__stop_commands] )) ||
_wash__stop_commands() {
    local commands; commands=(
'component:Stop a component running in a host' \
'provider:Stop a provider running in a host' \
'host:Purge and stop a running host' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash stop commands' commands "$@"
}
(( $+functions[_wash__stop__component_commands] )) ||
_wash__stop__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop component commands' commands "$@"
}
(( $+functions[_wash__stop__help_commands] )) ||
_wash__stop__help_commands() {
    local commands; commands=(
'component:Stop a component running in a host' \
'provider:Stop a provider running in a host' \
'host:Purge and stop a running host' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash stop help commands' commands "$@"
}
(( $+functions[_wash__stop__help__component_commands] )) ||
_wash__stop__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop help component commands' commands "$@"
}
(( $+functions[_wash__stop__help__help_commands] )) ||
_wash__stop__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop help help commands' commands "$@"
}
(( $+functions[_wash__stop__help__host_commands] )) ||
_wash__stop__help__host_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop help host commands' commands "$@"
}
(( $+functions[_wash__stop__help__provider_commands] )) ||
_wash__stop__help__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop help provider commands' commands "$@"
}
(( $+functions[_wash__stop__host_commands] )) ||
_wash__stop__host_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop host commands' commands "$@"
}
(( $+functions[_wash__stop__provider_commands] )) ||
_wash__stop__provider_commands() {
    local commands; commands=()
    _describe -t commands 'wash stop provider commands' commands "$@"
}
(( $+functions[_wash__ui_commands] )) ||
_wash__ui_commands() {
    local commands; commands=()
    _describe -t commands 'wash ui commands' commands "$@"
}
(( $+functions[_wash__up_commands] )) ||
_wash__up_commands() {
    local commands; commands=()
    _describe -t commands 'wash up commands' commands "$@"
}
(( $+functions[_wash__update_commands] )) ||
_wash__update_commands() {
    local commands; commands=(
'component:Update a component running in a host to a newer version' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash update commands' commands "$@"
}
(( $+functions[_wash__update__component_commands] )) ||
_wash__update__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash update component commands' commands "$@"
}
(( $+functions[_wash__update__help_commands] )) ||
_wash__update__help_commands() {
    local commands; commands=(
'component:Update a component running in a host to a newer version' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'wash update help commands' commands "$@"
}
(( $+functions[_wash__update__help__component_commands] )) ||
_wash__update__help__component_commands() {
    local commands; commands=()
    _describe -t commands 'wash update help component commands' commands "$@"
}
(( $+functions[_wash__update__help__help_commands] )) ||
_wash__update__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'wash update help help commands' commands "$@"
}

if [ "$funcstack[1]" = "_wash" ]; then
    _wash "$@"
else
    compdef _wash wash
fi
